Генерация каркаса
=================

Create, read, update и delete (CRUD) — четыре основных операции, при помощи
которых можно управлять данными. В нашем приложении главная
задача состоит в том, чтобы реализовать операции CRUD для записей и
комментариев. В этом разделе мы будем использовать инструмент `yiic` для
выполнения этой задачи. Этот процесс также известен как *scaffolding*.

Откроем командную строку и выполним следующие команды:
~~~
% /wwwroot/yii/framework/yiic shell /wwwroot/blog/index.php
Yii Interactive Tool v1.0
Please type 'help' for help. Type 'exit' to quit.
>> model User
......
>> model Post
......
>> model Tag
......
>> model Comment
......
>> crud Post
......
>> crud Comment
......
>> exit
~~~

> Info|Информация: Некоторые установленные копии PHP могут использовать другой
> файл `php.ini` для PHP анализатора командной строки (CLI). В результате
> выполнения команд выше, Вы можете столкнуться с такими ошибками
> как "YiiBase::include(PDO.php): failed to open stream..." или "...could
> not find driver". Пожалуйста, дважды проверьте свою конфигурацию PHP CLI,
> выполнив следующую команду:
>
> ~~~
> php -r "phpinfo();"
> ~~~
>
> Результат команды покажет, какой файл `php.ini` используется и какие
> расширения загружены. Если используется неправильный файл `php.ini`, Вы
> можете использовать следующую команду, чтобы явно определить правильный
> файл `php.ini`:
>
> ~~~
> php -c php.ini /wwwroot/yii/framework/yiic.php shell /wwwroot/blog/index.php
> ~~~

Команды выше выполняют две задачи. Во-первых, команды `model` генерируют файл
класса [модели](/doc/guide/ru/basics.model) для
каждой таблицы базы данных. Во-вторых, команды `CRUD` генерируют код,
необходимый операциям CRUD для моделей `Post` и `Comment`.

Мы можем проверить сгенерированный код, перейдя по следующим URL:

~~~
http://www.example.com/blog/index.php?r=post
http://www.example.com/blog/index.php?r=comment
~~~

Заметим, что особености постов и комментариев, реализованные сгенерированным
кодом, полностью независимы друг от друга. Также, при создании нового поста или
комментария, мы обязаны вводить информацию, такую как `authId` и `createTime`,
которая в реальном приложении должна устанавливаться программой. Не волнуйтесь.
Мы устраним эти проблемы в следующих точках. А пока мы должны быть
удовлетворены, поскольку этот прототип уже содержит большинство особенностей,
которые мы должны реализовать в приложении блога.

Чтобы подготовиться к следующим точкам, давайте более близко познакомимся с
содержимым сгенерированных файлов. Все файлы сгенерированы в директории
`/wwwroot/blog/protected`. Для удобства мы группируем их в файлы
[моделей](/doc/guide/ru/basics.model), [контроллеров](/doc/guide/ru/basics.controller)
и [представлений](/doc/guide/ru/basics.view):

 - файлы моделей:
  * `Models/User.php` содержит класс `User`, который наследуется от
  [CActiveRecord] и может использоваться для обращения таблице `User`;
  * `Models/Post.php` содержит класс `Post`, который наследуется от
  [CActiveRecord] и может использоваться для обращения таблице `Post`;
  * `Models/Tag.php` содержит класс `Tag`, который наследуется от
  [CActiveRecord] и может использоваться для обращения таблице `Tag`;
  * `Models/Comment.php` содержит класс `Comment`, который наследуется от
  [CActiveRecord] и может использоваться для обращения таблице `Comment`;

 - файлы контроллеров:
  * `Controllers/PostController.php` содержит класс `PostController`, который
  является контроллером, отвечающим за все операции CRUD для постов;
  * `Controllers/CommentController.php` содержит класс `CommentController`,
  который является контроллером, отвечающим за все операции CRUD для комментариев;

 - файлы представлений:
  * `views/post/create.php` - файл представления, который показывает HTML-форму
     для создания нового поста;
  * `views/post/update.php` - файл представления, который показывает HTML-форму
     для обновления существующего поста;
  * `views/post/show.php` - файл представления, который отображает подробную
     информацию поста;
  * `views/post/list.php` - файл представления, который отображает список постов;
  * `views/post/admin.php` - файл представления, который отображает посты в
     таблице с административными командами.
  * `views/post/_form.php` - частичный файл представления, который отображает
     HTML-форму для сбора информации о посте. Он включается в представления
     `create` и `update`.
  * подобный набор файлов представлений также сгенерирован для комментариев.

Чтобы лучше понять, как используются файлы выше, рассмотрим следующий процесс,
происходящий в приложении блога при отображении списка постов:

 1. [Входной скрипт](basics.entry)
    выполняется Web-сервером и создает и инициализирует экземпляр
    [приложения](basics.application)
    для обработки запроса;
 2. Приложение создает экземпляр класса `PostController` и выполняет его;
 3. Экземпляр класса `PostController` выполняет требуемое действие `list` вызовом метода `actionList()`;
 4. Метод `actionList()` делает запрос к базе данных для получения списка последних постов;
 5. Метод `actionList()` генерирует представление `list` с данными постов.


<div class="revision">$Id: prototype.scaffold.txt 681 2009-02-16 04:57:01Z qiang.xue $</div>