Аутентификация пользователя
===================

Наше приложение блога должно различать владельца системы и гостей. Поэтому
мы должны реализовать функцию
[пользовательской аутентификации](/doc/guide/ru/topics.auth).

Поскольку Вы, возможно, заметили, что каркас приложения уже обеспечивает
пользовательскую аутентификацию, проверяя, являются ли и имя пользователя и
пароль значениями `demo` или `admin`. В этом разделе мы изменим
соответствующий код так, чтобы аутентификация происходила посредством БД
таблицы `User`.

Пользовательская аутентификация выполняется в классе, реалицующего интерфейс
[IUserIdentity]. Для этой цели каркас приложения использует класс
`UserIdentity`. Класс находится в файле
`/wwwroot/blog/protected/components/UserIdentity.php`.

> Tip|Подсказка: В соответствии с соглашением, название файла класса должно быть
> таким же как имя класса плюс расширение `.php`. Следуя соглашению, можно
> обратиться к классу, используя
> [псевдоним пути](/doc/guide/ru/basics.namespace). Например, мы
> можем обратиться к классу `UserIdentity` псевдонимом
> `application.components.UserIdentity`. Многие API в Yii могут распознать
> псевдонимы пути (например, [Yii::createComponent()|YiiBase::createComponent]),
> и использование псевдонимов путей позволяет избежать потребности внедрения
> абсолютных файловых путей в коде. Существование абсолютных путей часто
> вызывает неприятности при развертывании приложения.

Мы модифицируем класс `UserIdentity` следующим образом,

~~~
[php]
<?php
class UserIdentity extends CUserIdentity
{
	private $_id;

	public function authenticate()
	{
		$username=strtolower($this->username);
		$user=User::model()->find('LOWER(username)=?',array($username));
		if($user===null)
			$this->errorCode=self::ERROR_USERNAME_INVALID;
		else if(md5($this->password)!==$user->password)
			$this->errorCode=self::ERROR_PASSWORD_INVALID;
		else
		{
			$this->_id=$user->id;
			$this->username=$user->username;
			$this->errorCode=self::ERROR_NONE;
		}
		return !$this->errorCode;
	}

	public function getId()
	{
		return $this->_id;
	}
}
~~~

В методе `authenticate()` мы используем класс `User` для поиска строки в
таблице `User`, в которой значение столбца `username` такое же как полученное
имя пользователя без учета регистра. Помните, что класс `User` был создан,
используя инструмент `yiic` в предыдущем разделе. Поскольку класс `User`
наследуется от класса [CActiveRecord], мы можем использовать
[особенность ActiveRecord](/doc/guide/ru/database.ar)
и обращаться к таблице `User` в ООП манере.

В классе `UserIdentity` мы также переопределяем метод `getId()`, который
возвращает значение `id` пользователя, найденного в таблице `User`.
Родительская реализация возвратила бы имя пользователя вместо `id`. И
`username` и `id` будут сохранены в пользовательском сеансе и доступны через
выражение `Yii::app()->user` в любом месте нашего кода.


> Tip|Подсказка: В классе `UserIdentity` мы ссылаемся на класс [CUserIdentity]
> без явного включения соответствующего файла класса. Это потому, что класс
> [CUserIdentity] - один из классов ядра фреймворка Yii. Yii будет
> автоматически включать файл класса для любого класса ядра, когда к нему
> обратятся впервые. Мы также делаем то же самое с классом `User`. Это потому,
> что файл класса `User` расположен в директории
> `/wwwroot/blog/protected/models`, которая была добавлена к параметру
> `include_path` PHP соответственно следующим строкам в конфигурации приложения:
>
> ~~~
> [php]
> return array(
>     ......
>     'import'=>array(
>         'application.models.*',
>         'application.components.*',
>     ),
>     ......
> );
> ~~~
>
> Конфигурация выше говорит, что любой класс, файл класса которого расположен
> или в директории `/wwwroot/blog/protected/models` или в директории
> `/wwwroot/blog/protected/components`, будет автоматически включен, когда к
> классу впервые обратятся.


Класс `UserIdentity`, главным образом, используется классом `LoginForm` для
аутентификации пользователя, основанной на введенных имени пользователя и
пароле, полученных на странице входа в систему. Следующий фрагмент кода
показывает как используется класс `UserIdentity`:

~~~
[php]
$identity=new UserIdentity($username,$password);
$identity->authenticate();
switch($identity->errorCode)
{
	case UserIdentity::ERROR_NONE:
		Yii::app()->user->login($identity);
		break;
	......
}
~~~


> Info|Информация: Люди часто запутываются в идентификации и компоненте
> приложения `user`. Первая представляет способ выполнения аутентификации, в то
> время как последний используется, чтобы представить информацию, связанную с
> текущим пользователем. У приложения может быть только один компонент `user`,
> но один или несколько классов идентификации, в зависимости от того, какую
> аутентификацию поддерживает приложение. Однажды аутентифицированный,
> экземпляр идентификации может передать информацию своего состояния компоненту
> `user` так, чтобы они были глобально доступны посредством компонента `user`.
> (прим.перев. запутался в этом абзаце...)

Чтобы проверить измененный класс `UserIdentity`, мы можем просмотреть URL-адрес
`http://www.example.com/blog/index.php` и попытаться войти с именем
пользователя и паролем, которые мы храним в таблице `User`. Если мы используем
базу данных, предоставленную
[демонстрационной версией блога](http://www.yiiframework.com/demos/blog/),
мы должны войти с именем пользователя `demo` и паролем `demo`. Отметим, что эта
система блога не обеспечивает функцию управления пользователями. Поэтому
пользователь не может изменить свою учетную запись или создать новую через веб-интерфейс.
Функцию управления пользователями можно рассматривать как будущее расширение к
приложению блога.

<div class="revision">$Id: prototype.auth.txt 689 2009-02-17 11:39:10Z weizhuo $</div>