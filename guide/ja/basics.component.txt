コンポーネント
=========

Yiiアプリケーションは仕様に基づいて書かれたオブジェクトであるコンポーネント
郡によって成り立っています。コンポーネントは[CComponent]のインスタンスか、
その元となるクラスです。コンポーネントの使用は大概の場合プロパティや
イベントの発生、ハンドリングを伴います。規定クラスである[CComponent]
はどのようにプロパティやイベントの定義を行うかを指定しています。

コンポーネント プロパティ
------------------

コンポーネントプロパティはオブジェクトのパブリックメンバ変数の様なものです。値を割り当てたり、読み取る事ができます。以下は例です。

~~~
[php]
$width=$component->textWidth;     // textWidthプロパティを取得
$component->enableCaching=true;   // enableCachingプロパティをセット
~~~

コンポーネントプロパティを定義する為には、単純にコンポーネントクラスのパブリックメンバ変数を宣言すれば良いでしょう。もっと柔軟なやり方は、下記の様にゲッターやセッターメソッドを定義する方法です:

~~~
[php]
public function getTextWidth()
{
    return $this->_textWidth;
}

public function setTextWidth($value)
{
    $this->_textWidth=$value;
}
~~~

これらのコードは、書き込み可能な`textWidth`プロパティ(この名前の大文字小文字は区別されません）を定義しています。プロパティの値を読み取る際は`getTextWidth()`が呼ばれ、プロパティの値が返されます;同様に、プロパティに書き込む際は`setTextWidth()`が呼ばれます。もしセッターメソッドが未定義の場合、プロパティは読み取りのみが可能となり、書き込みは例外を発生させるでしょう。プロパティの値を決める際に、ゲッター、セッターメソッドを使用する事は、プロパティの読み込みや書き込み時に実行可能なロジック（例えばバリデーションの実行、イベントの発生など）の追加において有益です。

>Note|注意: セッター/ゲッターメソッドで定義されたプロパティとクラスのメンバ変数には少し違いがあります。前述の名前は、大文字小文字が区別されませんが、後述は大文字小文字が区別されます。

コンポーネントイベント
---------------

Component events are special properties that take methods (called `event
handlers`) as their values. Attaching (assigning) a method to an event will
cause the method to be invoked automatically at the places where the event
is raised. Therefore, the behavior of a component can be modified in a way
that may not be foreseen during the development of the component.

A component event is defined by defining a method whose name starts with
`on`. Like property names defined via getter/setter methods, event names are
case-insensitive. The following code defines an `onClicked` event:

~~~
[php]
public function onClicked($event)
{
	$this->raiseEvent('onClicked', $event);
}
~~~

where `$event` is an instance of [CEvent] or its child class representing
the event parameter.

We can attach a method to this event as follows:

~~~
[php]
$component->onClicked=$callback;
~~~

where `$callback` refers to a valid PHP callback. It can be a global
function or a class method. If the latter, the callback must be given as an
array: `array($object,'methodName')`.

The signature of an event handler must be as follows:

~~~
[php]
function methodName($event)
{
    ......
}
~~~

where `$event` is the parameter describing the event (it originates from
the `raiseEvent()` call). The `$event` parameter is an instance of [CEvent] or
its derived class. At the minimum, it contains the information about who
raises the event.

If we call `onClicked()` now, the `onClicked` event will be raised (inside
`onClicked()`), and the attached event handler will be invoked
automatically.

An event can be attached with multiple handlers. When the event is raised,
the handlers will be invoked in the order that they are attached to the event.
If a handler decides to prevent the rest handlers from being invoked, it can set
[$event->handled|CEvent::handled] to be true.

<div class="revision">$Id: basics.component.txt 416 2008-12-28 05:28:11Z qiang.xue $</div>