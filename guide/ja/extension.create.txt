エクステンションの作成
===================

エクステンションは第三者の開発者によって使われるはずのものなので、作るためにはさらにいくらかの努力を必要とします。
次に示すのは一般的なガイドラインです。

* エクステンションは自己充足的でなければなりません。つまり外部の依存は最小限でなければなりません。
  エクステンションがさらなるパッケージ、クラスまたはリソースファイルのインストールを必要とするならば、
  それはユーザの頭痛となるでしょう。
* エクステンションに属しているファイルは、エクステンション名を名前とする同じディレクトリの下で組織される必要があります。
* エクステンションのクラスは、他のエクステンションのクラスとの競合を避けるために、何文字かの識別子を名前の前に置かれなければなりません。
* エクステンションは、コードと合せて詳細なインストールとAPIドキュメンテーションが必要です。
  これにより、エクステンションが使われる際に他の開発者に必要な時間と努力を減らします。
* エクステンションは、適当なライセンスを持っていなければなりません。
オープンソースとクローズドソースプロジェクトの両方にエクステンションを使って貰いたければ
BSD、MIT、その他のようなライセンスを考慮したほうが良いでしょう。GPLではありません。
なぜならGPLはその派生コードに同様にオープンソースであることを要求するためです。

以下に、[概要](/doc/guide/extension.overview)で解説される分類により、新しいエクステンションを作成する方法を解説します。
主に自身のプロジェクトで使われるコンポーネントを作成するときも、これらの説明があてはまります。

アプリケーションコンポーネント
---------------------

[アプリケーションコンポーネント](/doc/guide/basics.application#application-component)
は[IApplicationComponent]インタフェースを実装するかまたは[CApplicationComponent]の継承です。
メインのメソッドでは[IApplicationComponent::init]を実装する必要があり、そこでコンポーネントの初期化処理を行います。
このメソッドはコンポーネントが生成された後で起動され、[アプリケーション構成](/doc/guide/basics.application#application-configuration)
で規定される初期値が適用されます。

デフォルトではリクエスト処理中に最初にアクセスされるときに生成され、初期化されます。
もしアプリケーションインスタンスが生成された直後にアプリケーションコンポーネントが生成される必要があるならば、
ユーザはそのIDを[CApplication::preload]プロパティに記述しておかなければなりません。

ウィジェット
------

[ウィジェット](/doc/guide/basics.view#widget)は[CWidget]またはその子クラスの継承です。
新しいウィジェットを作成する最も簡単な方法は、既存のウィジェットを継承し、そのメソッドをオーバライドするか、またはそのデフォルトプロパティ値を変更することです。
たとえば、より素晴らしいCSSスタイルを［CTabView］に適用したいなら、ウィジェットを使用する際にその[CTabView::cssFile]プロパティを構成することができます。
以下のように[CTabView]を継承することで、ウィジェットを使うときもはやプロパティを構成しないようにすることも可能です。

~~~
[php]
class MyTabView extends CTabView
{
	public function init()
	{
		if($this->cssFile===null)
		{
			$file=dirname(__FILE__).DIRECTORY_SEPARATOR.'tabview.css';
			$this->cssFile=Yii::app()->getAssetManager()->publish($file);
		}
		parent::init();
	}
}
~~~

上記において、プロパティがセットされてなければ、[CWidget:init]メソッドをオーバライドし、新しいデフォルトCSSスタイルをURL[CTabView:cssFile]に割り当てます。
拡張としてまとめられるように、`MyTabView`クラスファイルを含む同じディレクトリの下に新しいCSSスタイルファイルを置きました。
CSSスタイルファイルはWebアクセスできないので、アセットとして公開する必要があります。

ゼロから新しいウィジェットを作製するために、主に[CWidget::init]と[CWidget::run]の2つのメソッドを実装する必要があります。
ウィジェットをビューに挿入するために`$this->beginWidget`を使うとき、最初のメソッドが呼ばれます。
最後に`$this->endWidget`を呼ぶとき、第2のメソッドが呼ばれます。
これらの2つのメソッドの間で表示される内容を捕えて処理したい場合には、[CWidget::init]の中で[出力バッファリング](http://us3.php.net/manual/en/book.outcontrol.php)を用います。
さらに[CWidget::run]の中でバッファされた出力を取り出し処理を行います。

ウィジェットは、しばしば、CSS、JavaScriptまたは他のリソースファイルをウィジェットを使うページに含むことが必要です。
彼らがウィジェットクラスファイルと共にいて、通常ウェブユーザーによってアクセスできないので、これらのファイルは*アセット*と呼ばれます。
これらのファイルにウェブアクセスできるようにするため、上記のコード断片で示すように、[WebApplication::assetManager]を用いて公開する必要があります。
この他、CSSまたはJavaScriptファイルを現在のページに含めたいならば、[CClientScript]を用いてそれを登録する必要があります。

~~~
[php]
class MyWidget extends CWidget
{
	protected function registerClientScript()
	{
		// ...CSS又はJavaScriptファイルをここで公開...
		$cs=Yii::app()->clientScript;
		$cs->registerCssFile($cssFile);
		$cs->registerScriptFile($jsFile);
	}
}
~~~

ウィジェットは、それ自身のビューファイルも備えているかもしれません。
もしそうならば、ウィジェットクラスファイルを含んでいるディレクトリの下に`views`という名のディレクトリをつくり、すべてのビューファイルをそこに置いてください。
ウィジェットクラスでは、ウィジェットの表示を行うために`$this->render('ViewName')`を用いてください。
そしてそれは我々がコントローラで行う類似の方法です。

アクション
------

An [アクション](/doc/guide/basics.controller#action)は[CAction]または子クラスから継承されるべきです。
アクションとして主に実装されるべきメソッドは[IAction::run]です。

フィルタ
------
A [filter](/doc/guide/basics.controller#filter) should extend from [CFilter]
or its child classes. The main methods that need to be implemented for a filter
are [CFilter::preFilter] and [CFilter::postFilter]. The former is invoked before
the action is executed while the latter after.

~~~
[php]
class MyFilter extends CFilter
{
	protected function preFilter($filterChain)
	{
		// logic being applied before the action is executed
		return true; // false if the action should not be executed
	}

	protected function postFilter($filterChain)
	{
		// logic being applied after the action is executed
	}
}
~~~

The parameter `$filterChain` is of type [CFilterChain] which contains information
about the action that is currently filtered.


コントローラ
----------
A [controller](/doc/guide/basics.controller) distributed as an extension
should extend from [CExtController], instead of [CController]. The main reason
is because [CController] assumes the controller view files are located under
`application.views.ControllerID`, while [CExtController] assumes the view
files are located under the `views` directory which is a subdirectory of
the directory containing the controller class file. Therefore, it is easier
to redistribute the controller since its view files are staying together
with the controller class file.


バリデータ
---------
A validator should extend from [CValidator] and implement its
[CValidator::validateAttribute] method.

~~~
[php]
class MyValidator extends CValidator
{
	protected function validateAttribute($model,$attribute)
	{
		$value=$model->$attribute;
		if($value has error)
			$model->addError($attribute,$errorMessage);
	}
}
~~~

コンソールコマンド
---------------
A [console command](/doc/guide/topics.console) should extend from
[CConsoleCommand] and implement its [CConsoleCommand::run] method.
Optionally, we can override [CConsoleCommand::getHelp] to provide
some nice help information about the command.

~~~
[php]
class MyCommand extends CConsoleCommand
{
	public function run($args)
	{
		// $args gives an array of the command-line arguments for this command
	}

	public function getHelp()
	{
		return 'Usage: how to use this command';
	}
}
~~~

モジュール
------
Please refer to the section about [modules](/doc/guide/basics.module#creating-module) on how to create a module.

A general guideline for developing a module is that it should be self-contained. Resource files (such as CSS, JavaScript, images) that are used by a module should be distributed together with the module. And the module should publish them so that they can be Web-accessible.


生成コンポーネント
-----------------
Developing a generic component extension is like writing a class. Again, the component
should also be self-contained so that it can be easily used by other developers.


<div class="revision">$Id: extension.create.txt 749 2009-02-26 02:11:31Z qiang.xue $</div>
