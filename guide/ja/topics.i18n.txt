国際化 (I18N)
====================

国際化 (I18N) はプログラムの変更なしで、各言語、各地域に適合できるように、
ソフトウェアアプリケーションを設計する過程を指します。
ウェブアプリケーションでは、ユーザーになる可能性のある人が世界中から訪れるため、
特に重要です。

Yii は I18N のサポートをいくつかの面から提供します。


   - 各可能な言語と変形のためのロケール（地域・言語）データの提供
   - メッセージとファイルの翻訳機能の提供
   - ロケール（地域・言語）に依存する日時フォーマットの提供
   - ロケール（地域・言語）に依存する数値フォーマットの提供

以下のサブセクションで上記について詳しく説明します。

ロケールと言語
-------------------

ロケールはユーザー言語の定義、国、ユーザーがユーザーインターフェースに期待する、
その他特別な優先傾向のパラメータのセットです。
これは、通常、言語 ID と地域 ID から成る ID により確認されます。
たとえば、ID `en_US` は、英語とアメリカのロケールを表します。
整合性のため、Yii の全てのロケール ID は、小文字で `LanguageID` か
`LanguageID_RegionID` のフォーマットで標準化されています。（例：`en`, `en_us`）

ロケールデータは、[CLocale] のインスタンスとして表されます。
これは、通貨記号、数値記号、通貨フォーマット、数値フォーマット、
日時フォーマット、日付に関する名称を含むロケールに依存する情報を提供します。
言語情報はロケール ID に含まれるため、[CLocale] では提供されません。
同様に、多くの場合、ロケールと言語は同じ意味として使用します。

ロケール ID を与えると、`CLocale::getInstance($localeID)` もしくは
`CApplication::getLocale($localeID)` により、
それに一致する [CLocale] インタンスを取得できます。

> Info|情報: Yii にはほとんど全ての言語と地域のためのロケールデータを含まれます。
データは [共通ロケールデータリポジトリ](http://unicode.org/cldr/) (CLDR) より取得されています。
各ロケールは、CLDR により提供されたオリジナルデータに含まれるうちの
主要な情報のサブセットになります。

Yii アプリケーションのために、[ソース言語|CApplication::sourceLanguage] と
[ターゲット言語|CApplication::language] を区別します。ターゲット言語は、
アプリケーションが対象とするユーザーの言語（ロケール）で、一方、
ソース言語はアプリケーションソースファイルに書かれている言語（ロケール）を
示します。
国際化は 2 つの言語が異なる場合のみで起こります。

[ターゲット言語|CApplication::language] は、
[アプリケーション初期構成](/doc/guide/basics.application#application-configuration) か、
それを国際化が起こる前に動的に変更することで、設定を行えます。

> Tip|ヒント: ユーザー（ブラウザの設定で定められている）により優先された言語により、
ターゲット言語を設定したいかもしれません。その場合、[CHttpRequest::preferredLanguage]
を使ってユーザーの優先言語 ID を読み出せます。

翻訳
-----------

I18N でもっとも必要なのは、おそらくメッセージ翻訳やビューの翻訳などの
翻訳です。前者はテキストメッセージの目標言語への翻訳、
後者はファイル全体の目標言語への翻訳です。

翻訳リクエストは翻訳対象（メッセージ、ビュー）、
対象（メッセージ、ビュー）のあるソース言語、
対象（メッセージ、ビュー）が翻訳される必要のあるターゲット言語から構成されます。
Yii では、ソース言語はデフォルトの [アプリケーションソース言語|CApplication::sourceLanguage]
になり、ターゲット言語はデフォルトの [アプリケーション言語|CApplication::language]
になります。
ソースとターゲット言語が同じ場合、翻訳されません。

### メッセージ翻訳

メッセージ翻訳は、[Yii::t()|YiiBase::t] をコールすることで行われます。
メソッドは指定されたメッセージを、[ソース言語|CApplication::sourceLanguage] から
[ターゲット言語|CApplication::language] へと翻訳します。

メッセージを翻訳するときには、メッセージが異なるカテゴリ（文脈）の下で
異なる翻訳が行われる可能性があるため、カテゴリを指定すべきです。
カテゴリ `yii` は Yii フレームワークのコアコードによって使用されるメッセージのために
予約済みです。

メッセージは、[Yii::t()|YiiBase::t] を呼び出す際に、実際のパラメータ値によって置き換えられる
パラメータプレースホルダを含められます。
例えば、以下のメッセージ翻訳リクエストは、オリジナルメッセージの `{alias}`
プレースホルダを、実際の alias 値で置き換えます。

~~~
[php]
Yii::t('yii', 'Path alias "{alias}" is redefined.',
	array('{alias}'=>$alias))
~~~

> Note|注意: 翻訳されるメッセージは一定の文字列です。それらにはメッセージ内容を
変える変数（`"Invalid {$message} content."` のような）を含めるべきではありません。
メッセージがいくつかの要素により変化する必要がある場合、
パラメータプレースホルダを使用してください。

翻訳されたメッセージは、*メッセージソース* と呼ばれるリポジトリに保存されます。
メッセージソースは、[CMessageSource] か、その子クラスのインスタンスに相当します。
[Yii::t()|YiiBase::t] が呼び出された際に、メッセージソースのメッセージを探し、
翻訳されたバージョンを返します。

Yii は下記メッセージソースのタイプを備えています。
[CMessageSource] を継承して、オリジナルのメッセージソースタイプを
作成することも可能です。

   - [CPhpMessageSource]: メッセージ翻訳は、PHP 配列の キーと値の組み合わせで
格納されます。オリジナルメッセージはキーに、翻訳されたメッセージは値になります。
各配列はメッセージの個々のカテゴリ内の翻訳を表し、
カテゴリ名で名づけられた PHP スクリプトファイルに分けて保存されます。
同じ言語のPHP 翻訳ファイルはロケール ID を名前とした同じディレクトリ下に
保存されます。
そして、それら全てのディレクトリは、[basePath|CPhpMessageSource::basePath]
により特定のディレクトリ下に位置します。

   - [CGettextMessageSource]: メッセージ翻訳は、[GNU
Gettext](http://www.gnu.org/software/gettext/) ファイルとして保存されます。

   - [CDbMessageSource]: メッセージ翻訳は、データベーステーブルとして
保存されます。詳細は、API ドキュメンテーション [CDbMessageSource] を参照してください。

メッセージソースは、
[アプリケーションコンポーネント](/doc/guide/basics.application#application-component)
として読み込まれます。
Yii は、[messages|CApplication::messages] という名前のアプリケーションコンポーネントが
ユーザーアプリケーションで使用されるメッセージを格納するとあらかじめ宣言します。
デフォルトでは、メッセージソースのタイプは [CPhpMessageSource] で、
`protected/messages` が PHP 翻訳ファイルのベースパスとなります。

要約すると、メッセージ翻訳を使用するためには、下記のステップが必要です:

   1. 適切な箇所で [Yii::t()|YiiBase::t] をコールします。

   2. `protected/messages/LocaleID/CategoryName.php` に
PHP 翻訳ファイルを作成します。各ファイルは、単にメッセージ翻訳の配列を返します。
注：あなたが翻訳メッセージを保存するのにデフォルトｍｐ [CPhpMessageSource] を使用すると仮定しています。

   3. [CApplication::sourceLanguage] と [CApplication::language] の設定を行います。

> Tip: The `yiic` tool in Yii can be used to manage message translations
when [CPhpMessageSource] is used as the message source. Its `message` command
can automatically extract messages to be translated from selected source files
and merge them with existing translations if necessary.

Since version 1.0.2, Yii has added the support for [choice format|CChoiceFormat]. Choice format
refers to choosing a translated according to a given number value. For example,
in English the word 'book' may either take a singular form or a plural form
depending on the number of books, while in other languages, the word may not have
different form (such as Chinese) or may have more complex 	plural form rules
(such as Russian). Choice format solves this problem in a simple yet effective way.

To use choice format, a translated message must consist of a sequence of
expression-message pairs separated by `|`, as shown below:

~~~
[php]
'expr1#message1|expr2#message2|expr3#message3'
~~~

where `exprN` refers to a valid PHP expression which evaluates to a boolean value
indicating whether the corresponding message should be returned. Only the message
corresponding to the first expression that evaluates to true will be returned.
An expression can contain a special variable named `n` (note, it is not `$n`)
which will take the number value passed as the first message parameter. For example,
assuming a translated message is:

~~~
[php]
'n==1#one book|n>1#many books'
~~~

and we are passing a number value 2 in the message parameter array when
calling [Yii::t()|YiiBase::t], we would obtain `many books` as the final
translated message.

As a shortcut notation, if an expression is a number, it will be treated as
`n==Number`. Therefore, the above translated message can be also be written as:

~~~
[php]
'1#one book|n>1#many books'
~~~


### File Translation

File translation is accomplished by calling
[CApplication::findLocalizedFile()]. Given the path of a file to be
translated, the method will look for a file with the same name under the
`LocaleID` subdirectory. If found, the file path will be returned;
otherwise, the original file path will be returned.

File translation is mainly used when rendering a view. When calling one of
the render methods in a controller or widget, the view files will be
translated automatically. For example, if the [target
language|CApplication::language] is `zh_cn` while the [source
language|CApplication::sourceLanguage] is `en_us`, rendering a view named
`edit` would resulting in searching for the view file
`protected/views/ControllerID/zh_cn/edit.php`. If the file is found, this
translated version will be used for rendering; otherwise, the file
`protected/views/ControllerID/edit.php` will be rendered instead.

File translation may also be used for other purposes, for example,
displaying a translated image or loading a locale-dependent data file.

Date and Time Formatting
------------------------

Date and time are often in different formats in different countries or
regions. The task of date and time formatting is thus to generate a date or
time string that fits for the specified locale. Yii provides
[CDateFormatter] for this purpose.

Each [CDateFormatter] instance is associated with a target locale. To get
the formatter associated with the target locale of the whole application,
we can simply access the [dateFormatter|CApplication::dateFormatter]
property of the application.

The [CDateFormatter] class mainly provides two methods to format a UNIX
timestamp.

   - [format|CDateFormatter::format]: this method formats the given UNIX
timestamp into a string according to a customized pattern (e.g.
`$dateFormatter->format('yyyy-MM-dd',$timestamp)`).

   - [formatDateTime|CDateFormatter::formatDateTime]: this method formats
the given UNIX timestamp into a string according to a pattern predefined in
the target locale data (e.g. `short` format of date, `long` format of
time).

Number Formatting
-----------------

Like data and time, numbers may also be formatted differently in different
countries or regions. Number formatting includes decimal formatting,
currency formatting and percentage formatting. Yii provides
[CNumberFormatter] for these tasks.

To get the number formatter associated with the target locale of the whole
application, we can access the
[numberFormatter|CApplication::numberFormatter] property of the
application.

The following methods are provided by [CNumberFormatter] to format an
integer or double value.

   - [format|CNumberFormatter::format]: this method formats the given
number into a string according to a customized pattern (e.g.
`$numberFormatter->format('#,##0.00',$number)`).

   - [formatDecimal|CNumberFormatter::formatDecimal]: this method formats
the given number using the decimal pattern predefined in the target locale
data.

   - [formatCurrency|CNumberFormatter::formatCurrency]: this method
formats the given number and currency code using the currency pattern
predefined in the target locale data.

   - [formatPercentage|CNumberFormatter::formatPercentage]: this method
formats the given number using the percentage pattern predefined in the
target locale data.

<div class="revision">$Id: topics.i18n.txt 772 2009-02-28 18:23:17Z qiang.xue $</div>