ビュー
====

ビューは主にユーザインターフェースの要素によって定義される PHP スクリプトです。
ビューには、PHP 文を含める事ができますが、データモデルを変更すべきではなく、
比較的シンプルに書くことを推奨します。
ロジック部とプレゼンテーション部の分離の精神のために、大きなロジックは
ビューではなく、コントローラかモデルに置くべきです。

ビューは、描画の際にビュースクリプトファイルを識別するために使われる名前を持ちます。
ビューの名前はビュースクリプトファイル名と同じです。
たとえば、ビュー `edit` は `edit.php` という名前のビュースクリプトファイルを参照します。
ビューを描画するためには、ビュー名を引数にして [CController::render()] をコールします。
メソッドは `protected/views/ControllerID` ディレクトリ下にある、対応するビューファイルを探します。

ビュースクリプト中では、`$this` を使用してコントローラインスタンスへのアクセスが可能です。
故に、ビューの中では `$this->propertyName` という形でコントローラのプロパティの参照できます。

さらに、データをビューに渡すために、次の方法を使用することができます: 

~~~
[php]
$this->render('edit', array(
	'var1'=>$value1,
	'var2'=>$value2,
));
~~~

上記では、[render()|CController::render] メソッドは 2 番目のパラメータ配列を変数へ展開します。
その結果、ビュースクリプト内では、ローカル変数 `$var1` と `$var2` としてアクセスできます。

レイアウト
------

レイアウトは、ビューをデコレーションするために使用される特別なビューで、
通常、いくつかのビューに共通しているユーザインターフェースの部分を含みます。
たとえば、レイアウトはヘッダー/フッター部を含み、その中にコンテントビューが
埋め込まれるかもしれません。

~~~
[php]
......header here......
<?php echo $content; ?>
......footer here......
~~~

`$content` にはコンテントビューのレンダリング結果を格納します。

レイアウトは [render()|CController::render] をコールするとき、
暗黙に適用されます。
デフォルトでは、ビュースクリプト `protected/views/layouts/main.php` が
レイアウトとして使用されます。これは、 [CWebApplication::layout] か
[CController::layout] のいずれかを変更することで、カスタマイズ可能です。
レイアウトを適用せずにビューの描画を行うには、
代わりに [renderPartial()|CController::renderPartial] をコールします。

ウィジェット
------

ウィジェットは、[CWidget] かその子クラスのインスタンスです。
これは、主に表象的な用途のためのコンポーネントです。
ウィジェットは、通常、複雑だが自己完結したユーザインターフェースを生成するために
ビュースクリプトに埋め込まれます。たとえば、カレンダーウィジェットは複雑なカレンダー
ユーザインターフェースを表示させるために使用出来ます。

ウィジェットを使うには、ビュースクリプト内で以下のようにします:

~~~
[php]
<?php $this->beginWidget('path.to.WidgetClass'); ?>
...ウィジェットによりキャプチャされるかもしれない本文(body content)...
<?php $this->endWidget(); ?>
~~~

または

~~~
[php]
<?php $this->widget('path.to.WidgetClass'); ?>
~~~

後の方法は、ウィジェットが本文(body content)を必要としないときに用いられます。

Widgets can be configured to customize its behaviors. This is done by
settings their initial property values when calling
[CBaseController::beginWidget] or [CBaseController::widget]. For example,
when using [CMaskedTextField] widget, we would like to specify the mask
being used. We can do so by passing an array of those property initial
values as follows, where the array keys are property names and array values
the initial values of the corresponding widget properties:

~~~
[php]
<?php
$this->widget('CMaskedTextField',array(
	'mask'=>'99/99/9999'
));
?>
~~~

To define a new widget, extend [CWidget] and override its
[init()|CWidget::init] and [run()|CWidget::run] methods:

~~~
[php]
class MyWidget extends CWidget
{
	public function init()
	{
		// this method is called by CController::beginWidget()
	}

	public function run()
	{
		// this method is called by CController::endWidget()
	}
}
~~~

Like a controller, a widget can also have its own view. By default, widget
view files are located under the `views` subdirectory of the directory
containing the widget class file. These views can be rendered by calling
[CWidget::render()], similar to that in controller. The only difference is
that no layout will be applied to a widget view.

System View
-----------

System views refer to the views used by Yii to display error and logging
information. For example, when a user requests for a non-existing controller
or action, Yii will throw an exception explaining the error. Yii displays the
exception using a specific system view.

The naming of system views follows some rules. Names like `errorXXX` refer
to views for displaying [CHttpException] with error code `XXX`. For
example, if [CHttpException] is raised with error code 404, the `error404`
view will be displayed.

Yii provides a set of default system views located under
`framework/views`. They can be customized by creating the same-named view
files under `protected/views/system`.

<div class="revision">$Id: basics.view.txt 416 2008-12-28 05:28:11Z qiang.xue $</div>