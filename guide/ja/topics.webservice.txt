ウェブサービス
===========

[ウェブサービスとは](http://en.wikipedia.org/wiki/Web_service)
ネットワーク越しに、マシン同士の相互運用性をサポートする仕組みのことです。
ウェブアプリケーションにおいては、多くの場合インターネットを介して、
リモートホストから呼び出して利用できるAPI群をウェブサービスと呼びます。

たとえば、[Flex](http://www.adobe.com/products/flex/)-basedクライアントはサーバで動いている、PHPのウェブアプリケーションに実装された関数を呼び出すことがあります。
ウェブサービスはコミュニケーションプロトコルスタックの基礎部分を[SOAP](http://en.wikipedia.org/wiki/SOAP) に依存しています。

Yiiは[CWebService] と [CWebServiceAction]を提供することで、
ウェブアプリケーションでウェブサービスを提供する作業を簡単にします。
APIは*サービスプロバイダ*と呼ばれるクラス群にまとめられます。
Yiiはそれぞれのクラスについて、[WSDL](http://www.w3.org/TR/wsdl)スペックファイルを生成し、
どのAPIが利用可能で、どのように呼び出すことができるのかを記述します。

クライアントによってAPIが呼び出されると、Yiiが対応するサービスプロバイダをインスタンス化し、
要求されたAPIを実行することで、リクエストを完了します。


> 注意: [CWebService] は [PHP SOAP
extension](http://www.php.net/manual/en/ref.soap.php) に依存します。
このセクションの例を実行する前に拡張が有効になっていることを確認して下さい。

サービスプロバイダの定義
-------------------------

上で述べたように、サービスプロバイダとはリモートから呼び出し可能なメソッドを定義するクラスのことです。

Yiiは[doc
comment](http://java.sun.com/j2se/javadoc/writingdoccomments/) と [class
reflection](http://www.php.net/manual/en/language.oop5.reflection.php) に基づいて、
どのメソッドがリモートから呼び出し可能であり、どのような引数をとり、そしてどのような返り値を返すのかを決定します。

まず単純な株価情報サービスからはじめましょう。
このサービスではクライアントが株価情報を要求できます。
サービスプロバイダを以下のほうに定義します。
プロバイダクラスの`StockController`を、 [CController]のサブクラスとして定義していることに注意してください。
これは必須ではありませんが、後ほどなぜこうするのか理由を説明します。

~~~
[php]
class StockController extends CController
{
	/**
	 * @param string the symbol of the stock
	 * @return float the stock price
	 * @soap
	 */
	public function getPrice($symbol)
	{
		$prices=array('IBM'=>100, 'GOOGLE'=>350);
		return isset($prices[$symbol])?$prices[$symbol]:0;
	    //... $symbol に対応する株価を返す
	}
}
~~~

上記の例では、`getPrice`というメソッドを宣言し、コメントに`@soap`タグをつけることで、
ウェブサービスAPIにしています。
コメントによって引数のデータタイプと返り値も決まります。
追加のAPIも同じ方法で宣言できます。

ウェブサービスアクションを定義する
----------------------------

Having defined the service provider, we need to make it available to
clients. In particular, we want to create a controller action to expose the
service. This can be done easily by declaring a [CWebServiceAction] action
in a controller class. For our example, we will just put it in
`StockController`.

~~~
[php]
class StockController extends CController
{
	public function actions()
	{
		return array(
			'quote'=>array(
				'class'=>'CWebServiceAction',
			),
		);
	}

	/**
	 * @param string the symbol of the stock
	 * @return float the stock price
	 * @soap
	 */
	public function getPrice($symbol)
	{
	    //...return stock price for $symbol
	}
}
~~~

That is all we need to create a Web service! If we try to access the
action by URL `http://hostname/path/to/index.php?r=stock/quote`, we will
see a lot of XML content which is actually the WSDL for the Web service we
defined.

> Tip: By default, [CWebServiceAction] assumes the current controller is
the service provider. That is why we define the `getPrice` method inside
the `StockController` class.

Consuming Web Service
---------------------

To complete the example, let's create a client to consume the Web service
we just created. The example client is written in PHP, but it could be in
other languages, such as `Java`, `C#`, `Flex`, etc.

~~~
[php]
$client=new SoapClient('http://hostname/path/to/index.php?r=stock/quote');
echo $client->getPrice('GOOGLE');
~~~

Run the above script in either Web or console mode, and we shall see `350`
which is the price for `GOOGLE`.

Data Types
----------

When declaring class methods and properties to be remotely accessible, we
need to specify the data types of the input and output parameters. The
following primitive data types can be used:

   - str/string: maps to `xsd:string`;
   - int/integer: maps to `xsd:int`;
   - float/double: maps to `xsd:float`;
   - bool/boolean: maps to `xsd:boolean`;
   - date: maps to `xsd:date`;
   - time: maps to `xsd:time`;
   - datetime: maps to `xsd:dateTime`;
   - array: maps to `xsd:string`;
   - object: maps to `xsd:struct`;
   - mixed: maps to `xsd:anyType`.

If a type is not any of the above primitive types, it is considered as a
composite type consisting of properties. A composite type is represented in
terms of a class, and its properties are the class' public member variables
marked with `@soap` in their doc comments.

We can also use array type by appending `[]` to the end of a primitive or
composite type. This would specify an array of the specified type.

Below is an example defining the `getPosts` Web API which returns an array
of `Post` objects.

~~~
[php]
class PostController extends CController
{
	/**
	 * @return Post[] a list of posts
	 * @soap
	 */
	public function getPosts()
	{
		return Post::model()->findAll();
	}
}

class Post extends CActiveRecord
{
	/**
	 * @var integer post ID
	 * @soap
	 */
	public $id;
	/**
	 * @var string post title
	 * @soap
	 */
	public $title;
}
~~~

Class Mapping
-------------

In order to receive parameters of composite type from client, an
application needs to declare the mapping from WSDL types to the
corresponding PHP classes. This is done by configuring the
[classMap|CWebServiceAction::classMap] property of [CWebServiceAction].

~~~
[php]
class PostController extends CController
{
	public function actions()
	{
		return array(
			'service'=>array(
				'class'=>'CWebServiceAction',
				'classMap'=>array(
					'Post'=>'Post',  // or simply 'Post'
				),
			),
		);
	}
	......
}
~~~

Intercepting Remote Method Invocation
-------------------------------------

By implementing the [IWebServiceProvider] interface, a sevice provider can
intercept remote method invocations. In
[IWebServiceProvider::beforeWebMethod], the provider may retrieve the
current [CWebService] instance and obtain the the name of the method
currently being requested via [CWebService::methodName]. It can return
false if the remote method should not be invoked for some reason (e.g.
unauthorized access).

<div class="revision">$Id: topics.webservice.txt 265 2008-11-23 12:30:16Z weizhuo $</div>