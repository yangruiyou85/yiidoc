コンソールアプリケーション
====================

コンソールアプリケーションは、主として、オンラインのウェブアプリケーションが必要とするオフラインの仕事、
例えば、コード生成、検索用インデックスのコンパイル、メール送信等を実行するために使用されます。
Yiiはオブジェクト指向でコンソールアプリケーションを書くためのフレームワークを提供しています。
このフレームワークを使うと、オンラインのウェブアプリケーションが使用するリソース
(例えばデータベース接続)にコンソールアプリケーションからアクセスすることが可能になります。


概要
--------

Yii におけるコンソールのタスクは [コマンド(command)|CConsoleCommand] という形で提供されます。
すなわち、コンソールのコマンドは [CConsoleCommand] を継承したクラスとして書かれます。

`yiic webapp` ツールを使って Yii の初期スケルトンアプリケーションを作成するとき、
`protected` ディレクトリの下に二つのファイルが有ることに気付くでしょう。

* `yiic`: これは Linux/Unix で使われる実行スクリプトです
* `yiic.bat`: これは Windows で使われる実行バッチファイルです

コンソールウィンドウで次のようにコマンドを入力してみましょう。

~~~
cd protected
yiic help
~~~

上記を実行すると、利用できるコンソールコマンドの一覧が表示されます。
デフォルトでは、利用可能なコマンドには、Yii フレームワークによって提供されるもの
(**システムコマンド**と呼ばれます)と、それぞれのアプリケーションのために
ユーザが開発したもの(**ユーザコマンド**と呼ばれます)が含まれます。

コマンドの使い方を見るためには、以下のように実行します。

~~~
yiic help <コマンド名>
~~~

そして、コマンドを実行するためには、以下のコマンド書式を使います。

~~~
yiic <コマンド名> [引数...]
~~~


コマンドを作成する
------------------

コンソールコマンドは [CConsoleApplication::commandPath] によって定義される
ディレクトリの下にクラスファイルとして保存されます。既定値では、このディレクトリは `protected/commands` です。

コンソールコマンドのクラスは [CConsoleCommand] を継承しなければなりません。
また、クラス名は `XyzCommand` の形式でなければなりません。ここで `Xyz` は、
コマンド名の最初の文字を大文字にしたものを指します。例えば、`sitemap` という
コマンドは、`SitemapCommand` というクラス名を使わなければなりません。
コンソールコマンドの名前は大文字と小文字を区別します。

> Tip: [CConsoleApplication::commandMap] を構成すれば、別の命名規約による
> コマンドクラスを作成したり、別のディレクトリに保存したりすることも出来ます。

新しいコマンドを作成する場合、通常は [CConsoleCommand::run()] をオーバーライド
したり、一つないし複数のコマンドアクションを開発する必要があります。(次のセクションで説明します。)

コンソールコマンドを実行する時は、その [CConsoleCommand::run()] メソッドが
コンソールアプリケーションから呼び出されます。コンソールコマンドのすべての引数も、下記のメソッドシグニチャに従って [CConsoleCommand::run()] に引き渡されます。

~~~
[php]
public function run($args) { ... }
~~~

ここで `$args` が、コマンドラインで指定された追加の引数を示しています。

コンソールコマンドの中では、`Yii::app()` を使ってコンソールアプリケーションの
インスタンスにアクセスすることが出来ます。そして、それを通じて、データベース
接続などのリソースにアクセスすることが出来ます(例えば、`Yii::app()->db`)。
お分かりだと思いますが、Yii::app() の使い方は、ウェブアプリケーションで出来る
ことと非常によく似たものです。

> Info|情報: バージョン 1.1.1 以降は、同一マシンの**すべての** Yii アプリケーションによって共有できるグローバルなコマンドを作成することも出来ます。
そうするためには、`YII_CONSOLE_COMMANDS` という名前の環境変数を定義して、
実際に存在するディレクトリを指し示すようにして下さい。そうすれば、グローバルな
コマンドのクラスファイルをこのディレクトリに配置することが出来ます。

コンソールコマンドアクション
----------------------------

> Note|注意: コンソールコマンドアクションの機能は、バージョン 1.1.5 以降で利用することが出来ます。

コンソールコマンドは、しばしば、異なるコマンドライン引数(必須のものもあれば、
任意のものもある)を取り扱う必要があります。また、異なるサブタスクを扱うために
いくつかのサブコマンドを提供しなければならない場合もあります。これらの仕事は、
コンソールコマンドアクションを使って、単純化することが出来ます。


としてに関して、それぞれのコンソールタスクを意味します。
そして、[コンソールアプリケーション|CConsoleApplication]インスタンスは
コマンドライン要求を適切なコマンドに送るのに用いられます。
アプリケーションインスタンスはエントリスクリプトで作られます。
コンソールタスクを実行するには、以下のようにコマンドラインからコマンドを実行します。

~~~
php entryScript.php CommandName Param0 Param1 ...
~~~

ここで`CommandName`はケースセンシティブなコマンド名で、`Param0`、`Param1`等はコマンドインスタンスに
渡されるパラメータです。

コンソールアプリケーションのためのエントリスクリプトは通常以下のように書かれます。これは
ウェブアプリケーションの場合と似ています。

~~~
[php]
defined('YII_DEBUG') or define('YII_DEBUG',true);
// Yiiブートストラップファイルを読み込む
require_once('path/to/yii/framework/yii.php');
// アプリケーションインスタンスを生成して実行
$configFile='path/to/config/file.php';
Yii::createConsoleApplication($configFile)->run();
~~~

次に、[CConsoleCommand]から継承されるコマンドクラスを生成します。
それぞれのコマンドクラスは名前の最後に`Command`が付くように名付けられるべきです。
例えば、`email`コマンドを定義する場合は、`EmailCommand`クラスを書くことになります。
全てのコマンドクラスファイルは、[アプリケーションベースディレクトリ](/doc/guide/basics.application#application-base-directory)の下の`commands`サブディレクトリの下に置かれます。

> Tip|ヒント: [CConsoleApplication::commandMap]を構成することにより、
コマンドクラスを異なる命名ルールで名付けることができ、また異なるディレクトリに配置することができます。

コマンドクラスを記述することは、主に[CConsoleCommand::run]メソッドを実装することが必要です。
コマンドラインパラメータはこのメソッドへの配列として渡されます。以下に一例を示します。

~~~
[php]
class EmailCommand extends CConsoleCommand
{
	public function run($args)
	{
		$receiver=$args[0];
		// 電子メールを$receiverに送信
	}
}
~~~

コマンド実行中いつでも、コンソールアプリケーションインスタンスに、`Yii::app()`によりアクセスすることが可能です。
ウェブアプリケーションの様に、コンソールアプリケーションも構成可能です。
例えば、データベースにアクセスするため、`db`アプリケーションコンポーネントを構成することが可能です。
通常、構成ファイルはPHPファイルとして定義され、コンソールアプリケーションクラスのコンストラクタに渡されるか、
またはエントリスクリプト中において、[createConsoleApplication|YiiBase::createConsoleApplication]により構成されます。

`yiic`ツールの使用
---------------------

[最初のアプリケーションを作成する](/doc/guide/quickstart.first-app)ために`yiic`ツールを使ってきました。
実際、`yiic`ツールはコンソールアプリケーションとして実装され、そのエントリスクリプトファイルは`framework/yiic.php`です。
`yiic`を使うことで、ウェブアプリケーションの骨格自動生成、コントローラクラスやモデルクラスの自動生成、
CRUD操作に必要なコードの自動生成、翻訳するメッセージの抽出等が可能です。

カスタムコマンドを追加することで`yiic`の拡張が可能です。
そうするためには、[最初のアプリケーションを作成する](/doc/guide/quickstart.first-app)で説明されているように、
`yiic webapp`により生成された骨格アプリケーションから始めなければなりません。
`yiic webapp`コマンドは`yiic`と`yiic.bat`という2つのファイルを`protected`ディレクトリの下に作成します。
これらは`yiic`ツールのローカルバージョンであり、特別にそのウェブ アプリケーションのために作成されたものです。

自分のコマンドを`protected/commands`の下に作成することができます。
ローカルの`yiic`ツールを実行することにより、自分自身のコマンドが標準のコマンドと共に実行するのが確認できます。
自分のコマンドはさらに、`yiic shell`が実行されたときに使用されるようにすることもできます。そうするためには
自分のコマンドクラスファイルを`protected/commands/shell`の下に置くだけです。

<div class="revision">$Id: topics.console.txt 745 2009-02-25 21:45:42Z qiang.xue $</div>
