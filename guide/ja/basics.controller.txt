コントローラ
==========

`コントローラ` は [CController] かその子クラスのインスタンスです。
インスタンスは、これを求めるユーザーからの要求があった際にアプリケーション
により生成されます。コントローラが起動するとき、通常、必要なモデルを持ち、
適切なビューのレンダリングを行うことで、要求されたアクションを実行します。
簡単なフォームでのアクションは、`action` から始まる名前のコントローラクラス
メソッドとなります。

コントローラは規定のアクション（デフォルトアクション）を持っています。
どのアクションを実行するかをユーザーが指定しない場合、デフォルトアクション
が実行されます。デフォルトでは、デフォルトアクション名は `index` です。
これは、[CController::defaultAction] を設定することで変更できます。

以下にコントローラクラスに必要な最小のコードを示します。
このコントローラにはアクションが定義されていないため、
このコントローラへのリクエストは例外が発生します。
~~~
[php]
class SiteController extends CController
{
}
~~~


ルート（道筋）
-----

コントローラとアクションは ID により識別されます。
コントローラ ID は `path.to.xyz` の形式で、コントローラクラスファイル
`protected/controllers/path/to/XyzController.php` に対応します。
（`xyz` を実際の名前に置き換えて考えてください。
  例えば、`post` は `protected/controllers/PostController.php` に対応します。）
また、アクション ID はアクションメソッド名からプレフィックス `action` を
除いたものです。たとえば、コントローラクラスに `actionEdit` という名前の
メソッドがあれば、アクション ID は `edit` になります。

ユーザーはルート（道筋）により、特定のコントローラとアクションをリクエスト
します。ルートはスラッシュによりコントローラ ID とアクション ID を連結する
ことで形成されます。たとえば、ルート `post/edit` は `PostController` の
`edit` アクションを参照します。そして、デフォルトでは
`http://hostname/index.php?r=post/edit` という URL によりこのコントローラと
アクションをリクエストできます。

>Note: デフォルトでは、ルートは大文字と小文字を区別します。
>version 1.0.1 以降では、[CUrlManager::caseSensitive] を false に設定するこ
>とで、大文字と小文字を区別しないようすることも可能になりました。
>大文字と小文字を区別しないモード（case-insensitive mode）の場合、
>コントローラクラスファイルを含んでいるディレクトリーが小文字かどうかを確か
>め、[controller map|CWebApplication::controllerMap] と
>[action map|CController::actions] の両方では、キーは小文字に変換し使用され
>ます。

コントローラのインスタンス
------------------------

コントローラのインスタンスは [CWebApplication] ハンドラにリクエストが入って
きた際に生成されます。コントローラ ID が与えられると、アプリケーションは
次のルールを用いて、コントローラクラスとクラスファイルを探し出します。

   - [CWebApplication::catchAllRequest] が指定されている場合、コントローラ
はこのプロパティを元に生成され、ユーザの指定したコントローラ ID は無視され
ます。これは主にアプリケーションをメンテナンスモードにし、通知のための静的
ページを表示するために使用します。

   - ID が [CWebApplication::controllerMap] に指定されている場合、対応する
コントローラ設定に基づき、コントローラインスタンスが生成されます。

   - ID が `'path.to.xyz'` 形式の場合、コントローラクラス名は `XyzController`
で、対応するクラスファイルは `protected/controllers/path/to/XyzController.php`
であると仮定されます。たとえば、コントローラ ID が `admin.user` なら、コン
トローラクラス名が `UserController` で、クラスファイルが
`protected/controllers/admin/UserController.php` になります。
もしクラスがなければ、404 [CHttpException] が呼び出されます。


アクション
------

前述したとおり、アクションは `action` から始まる名前のメソッドにより定義で
きます。より高度な方法は、アクションクラスを定義し、リクエスト時にインスタ
ンス化するようにコントローラに要求する方法です。この方法を用いる事で、アク
ションの再利用が可能になるため、より再利用性を高められます。

新しいアクションクラスを定義するためには、下記のように行います:

~~~
[php]
class UpdateAction extends CAction
{
	public function run()
	{
		// ここにアクションロジックを記述
	}
}
~~~

コントローラーがこのアクションを認識するように、このコントローラクラスの
[actions()|CController::actions] メソッドを上書き定義します。

~~~
[php]
class PostController extends CController
{
	public function actions()
	{
		return array(
			'edit'=>'application.controllers.post.UpdateAction',
		);
	}
}
~~~

上記で使用されている、`application.controllers.post.UpdateAction` というパ
スは、アクションクラスファイル `protected/controllers/post/UpdateAction.php`
へのパスのエイリアスです。

Writing class-based actions, we can organize an application in a modular
fashion. For example, the following directory structure may be used to
organize the code for controllers:

~~~
protected/
    controllers/
        PostController.php
        UserController.php
        post/
            CreateAction.php
            ReadAction.php
            UpdateAction.php
        user/
            CreateAction.php
            ListAction.php
            ProfileAction.php
            UpdateAction.php
~~~

Filter
------

Filter is a piece of code that is configured to be executed before and/or
after a controller action executes. For example, an access control filter
may be executed to ensure that the user is authenticated before executing
the requested action; a performance filter may be used to measure the time
spent in the action execution.

An action can have multiple filters. The filters are executed in the order
that they appear in the filter list. A filter can prevent the execution of
the action and the rest unexecuted filters.

A filter can be defined as a controller class method. The method name must
begin with `filter`. For example, the existence of the
`filterAccessControl` method defines a filter named `accessControl`. The
filter method must be of the signature:

~~~
[php]
public function filterAccessControl($filterChain)
{
	// call $filterChain->run() to continue filtering and action execution
}
~~~

where `$filterChain` is an instance of [CFilterChain] which represents the
filter list associated with the requested action. Inside the filter method,
we can call `$filterChain->run()` to continue filtering and action
execution.

A filter can also be an instance of [CFilter] or its child class. The
following code defines a new filter class:

~~~
[php]
class PerformanceFilter extends CFilter
{
	protected function preFilter($filterChain)
	{
		// logic being applied before the action is executed
		return true; // false if the action should not be executed
	}

	protected function postFilter($filterChain)
	{
		// logic being applied after the action is executed
	}
}
~~~

To apply filters to actions, we need to override the
`CController::filters()` method. The method should return an array of
filter configurations. For example,

~~~
[php]
class PostController extends CController
{
	......
	public function filters()
	{
		return array(
			'postOnly + edit, create',
			array(
				'application.filters.PerformanceFilter - edit, create',
				'unit'=>'second',
			),
		);
	}
}
~~~

The above code specifies two filters: `postOnly` and `PerformanceFilter`.
The `postOnly` filter is method-based (the corresponding filter method is
defined in [CController] already); while the `PerformanceFilter` filter is
object-based. The path alias `application.filters.PerformanceFilter`
specifies that the filter class file is
`protected/filters/PerformanceFilter`. We use an array to configure
`PerformanceFilter` so that it may be used to initialize the property
values of the filter object. Here the `unit` property of
`PerformanceFilter` will be initialized as `'second'`.

Using the plus and the minus operators, we can specify which actions the
filter should and should not be applied to. In the above, the `postOnly`
should be applied to the `edit` and `create` actions, while
`PerformanceFilter` should be applied to all actions EXCEPT `edit` and
`create`. If neither plus nor minus appears in the filter configuration,
the filter will be applied to all actions.

<div class="revision">$Id: basics.controller.txt 626 2009-02-04 20:51:13Z qiang.xue $</div>