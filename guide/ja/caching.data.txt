データキャッシュ
============

データキャッシュは、PHP 変数をキャッシュし、
後でそのキャッシュから読み込めるようにします。
この目的のために、キャッシュコンポーネントのベースクラス [CCache] は、
多くの場合に利用される [set()|CCache::set] と [get()|CCache::get] の
2 つのメソッドを提供します。

キャッシュに変数 `$value` を保存するには、ユニーク ID を選び、
[set()|CCache::set] を呼びます:

~~~
[php]
Yii::app()->cache->set($id, $value);
~~~

キャッシュされたデータは、キャッシングポリシー（たとえば、
キャッシュ容量いっぱいになれば、一番古いデータが削除されます）のために、
キャッシュが消されない限りずっと残ります。
この挙動を変えるために、[set()|CCache::set] を呼ぶときに、
有効期限パラメータを指定し、一定の期間の後、キャッシュが削除されるように
する事もできます。

~~~
[php]
// 最大 30 秒間、キャッシュに値が保持される
Yii::app()->cache->set($id, $value, 30);
~~~

その後、この変数（同じ、あるいは別のウェブリクエスト中に）にアクセスする必要がある場合、
その ID を指定して [get()|CCache::get] を呼べば、キャッシュから読み込めます。
もし、返り値が false なら、値がキャッシュされていないため、
キャッシュを再生成する必要があります。

~~~
[php]
$value=Yii::app()->cache->get($id);
if($value===false)
{
	// キャッシュが見つからなかったため、
	// 後で利用できるように、$value のキャッシュを再生成し保存します:
	// Yii::app()->cache->set($id,$value);
}
~~~

When choosing the ID for a variable to be cached, make sure the ID is
unique among all other variables that may be cached in the application. It
is NOT required that the ID is unique across applications because the cache
component is intelligent enough to differentiate IDs for different
applications.

To remove a cached value from cache, call [delete()|CCache::delete]; and
to remove everything from cache, call [flush()|CCache::flush]. Be very
careful when calling [flush()|CCache::flush] because it also removes cached
data that are from other applications.

> Tip: Because [CCache] implements `ArrayAccess`, a cache component can be
> used liked an array. The followings are some examples:
> ~~~
> [php]
> $cache=Yii::app()->cache;
> $cache['var1']=$value1;  // equivalent to: $cache->set('var1',$value1);
> $value2=$cache['var2'];  // equivalent to: $value2=$cache->get('var2');
> ~~~

Cache Dependency
----------------

Besides expiration setting, cached data may also be invalidated according
to some dependency changes. For example, if we are caching the content of
some file and the file is changed, we should invalidate the cached copy and
read the latest content from the file instead of the cache.

We represent a dependency as an instance of [CCacheDependency] or its
child class. We pass the dependency instance along with the data to be
cached when calling [set()|CCache::set].

~~~
[php]
// the value will expire in 30 seconds
// it may also be invalidated earlier if the dependent file is changed
Yii::app()->cache->set($id, $value, 30, new CFileCacheDependency('FileName'));
~~~

Now if we retrieve `$value` from cache by calling [get()|CCache::get], the
dependency will be evaluated and if it is changed, we will get a false
value, indicating the data needs to be regenerated.

Below is a summary of the available cache dependencies:

   - [CFileCacheDependency]: the dependency is changed if the file's last
modification time is changed.

   - [CDirectoryCacheDependency]: the dependency is changed if any of the
files under the directory and its subdirectories is changed.

   - [CDbCacheDependency]: the dependency is changed if the query result
of the specified SQL statement is changed.

   - [CGlobalStateCacheDependency]: the dependency is changed if the value
of the specified global state is changed. A global state is a variable that
is persistent across multiple requests and multiple sessions in an
application. It is defined via [CApplication::setGlobalState()].

   - [CChainedCacheDependency]: the dependency is changed if any of the
dependencies on the chain is changed.

<div class="revision">$Id: caching.data.txt 169 2008-11-06 19:43:44Z qiang.xue $</div>