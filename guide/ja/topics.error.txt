エラーハンドリング
==============

YiiはPHP5の例外メカニズムを元にした完全なエラーハンドリングを提供します。
アプリケーションがユーザのリクエストによって呼び出された時、
アプリケーションは[handleError|CApplication::handleError]メソッドをPHP
warningとnoticeを扱うために登録し、
[handleException|CApplication::handleException]メソッドをPHP exeptions
(例外)を扱うために登録します。したがって、もしアプリケーションの実行時に
PHPのwarningやnotice、キャッチされない例外が発生した場合は、
エラーハンドラーがコントロールを横取りし、必要なエラーハンドリングの処理を
開始します。

> Tip|ヒント: エラーハンドラーは、アプリケーションのコンストラクタでPHP
ファンクションである[set_exception_handler]
(http://www.php.net/manual/en/function.set-exception-handler.php)と
[set_error_handler]
(http://www.php.net/manual/en/function.set-error-handler.php)によって
登録されます。もし不要な場合は、[entry script](/doc/guide/basics.entry)で
`YII_ENABLE_ERROR_HANDLER`と`YII_ENABLE_EXCEPTION_HANDLER`の定数をfalse
として定義する事で対応できます。

デフォルトでは[errorHandler|CApplication::errorHandler]
（[exception|CApplication::exceptionHandler]も同様）は
[onError|CApplication::onError]
(または[onException|CApplication::onException])イベントを発生させます。
これらは、もしエラー（あるいは例外）がイベントハンドラーに全く
ハンドルされていない場合、[errorHandler|CErrorHandler]アプリケーション
コンポーネントから助けを呼びます。

例外の発生
------------------

Yiiでの例外は、PHPでの例外と同様です。以下の文法を例外を発生させる為に
使用できます:

~~~
[php]
throw new ExceptionClass('ExceptionMessage');
~~~

Yiiは二つの例外クラスを定義しています。[CException] と [CHttpException] 
です。[CHttpException] はエンドユーザーへ例外情報を表示するための例外
になっていて、[CException] はそうでない場合の
(エラーを表示せずに処理する場合などの)為の代替案です。また、
[CHttpException] はHTTPステータスコードを提供する 
[statusCode|CHttpException::statusCode] プロパティを持っています。
例外クラスは次章で述べるように、例外を表示するかどうかを決定します。

> Tip: [CHttpException]における例外の発生はユーザの入力ミスを報告するのに
シンプルな方法です。例えば、もしユーザが不正なpost IDのURLを要求した場合、
以下のように404error (page not found) をシンプルに表示させることが出来ます:
~~~
[php]
// もし要求されたpost IDが不正な場合
throw new CHttpException(404,'The specified post cannot be found.');
~~~

Displaying Errors
-----------------

When an error is forwarded to the [CErrorHandler] application component,
it chooses an appropriate view to display the error. If the error is meant
to be displayed to end users, such as a [CHttpException], it will use a
view named `errorXXX`, where `XXX` stands for the HTTP status code (e.g.
400, 404, 500). If the error is an internal one and should only be
displayed to developers, it will use a view named `exception`. In the
latter case, complete call stack as well as the error line information will
be displayed.

> Info: When the application runs in [production
mode](/doc/guide/basics.entry#debug-mode), all errors including those internal
ones will be displayed using view `errorXXX`. This is because the call
stack of an error may contain sensitive information. In this case,
developers should rely on the error logs to determine what is the real
cause of an error.

[CErrorHandler] searches for the view file corresponding to a view in the
following order:

   1. `WebRoot/themes/ThemeName/views/system`: this is the `system` view
directory under the currently active theme.

   2. `WebRoot/protected/views/system`: this is the default `system` view
directory for an application.

   3. `yii/framework/views`: this is the standard system view directory
provided by the Yii framework.

Therefore, if we want to customize the error display, we can simply create
error view files under the system view directory of our application or
theme. Each view file is a normal PHP script consisting of mainly HTML
code. For more details, please refer to the default view files under the
framework's `view` directory.

Message Logging
---------------

A message of level `error` will always be logged when an error occurs. If
the error is caused by a PHP warning or notice, the message will be logged
with category `php`; if the error is caused by an uncaught exception, the
category would be `exception.ExceptionClassName` (for [CHttpException] its
[statusCode|CHttpException::statusCode] will also be appended to the
category). One can thus exploit the [logging](/doc/guide/topics.logging)
feature to monitor errors happened during application execution.

<div class="revision">$Id: topics.error.txt 170 2008-11-06 20:33:35Z qiang.xue $</div>