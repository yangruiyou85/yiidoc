视图
====

视图是一个包含了主要的用户交互元素的PHP脚本.他可以包含PHP语句,但是我们建议这些语句不要去改变数据模型,且最好能够保持其单纯性(单纯作为视图)!为了实现逻辑和界面分离,大部分的逻辑应该被放置于控制器或模型里,而不是视图里.

视图有一个当其被渲染(render)时用于用于校验的名称.视图的名称与其脚本名称是一样的.例如:视图  `edit`  的名称出自一个名为 `edit.php` 的脚本文件.通过  [CController::render()]  调用视图的名称可以渲染一个视图.这个方法将在 `protected/views/ControllerID` 目录下寻找对应的视图文件.

Inside the view script, we can access the controller instance using
`$this`. We can thus `pull` in any property of the controller by
evaluating `$this->propertyName` in the view.

We can also use the following `push` approach to pass data to the view:

~~~
[php]
$this->render('edit', array(
	'var1'=>$value1,
	'var2'=>$value2,
));
~~~

In the above, the [render()|CController::render] method will extract the second array
parameter into variables. As a result, in the view script we can access
local variables `$var1` and `$var2`.

布局
------

Layout is a special view that is used to decorate views. It usually
contains portions of user interface that are common among several views.
For example, a layout may contain header and footer portions and embed
the content view in between,

~~~
[php]
......header here......
<?php echo $content; ?>
......footer here......
~~~

where `$content` stores the rendering result of the content view.

Layout is implicitly applied when calling [render()|CController::render].
By default, the view script `protected/views/layouts/main.php` is used as
the layout. This can be customized by changing either [CWebApplication::layout]
or [CController::layout]. To render a view without applying any layout,
call [renderPartial()|CController::renderPartial] instead.

组件
------

A widget is an instance of [CWidget] or its child class. It is a component
mainly for presentational purpose. Widgets are usually embedded in a view
script to generate some complex yet self-contained user interface. For
example, a calendar widget can be used to render a complex calendar user
interface. Widgets enable better reusability in user interface.

To use a widget, do as follows in a view script:

~~~
[php]
<?php $this->beginWidget('path.to.WidgetClass'); ?>
...body content that may be captured by the widget...
<?php $this->endWidget(); ?>
~~~

or

~~~
[php]
<?php $this->widget('path.to.WidgetClass'); ?>
~~~

The latter is used when the widget does not need any body content.

Widgets can be configured to customize its behaviors. This is done by
settings their initial property values when calling
[CBaseController::beginWidget] or [CBaseController::widget]. For example,
when using [CMaskedTextField] widget, we would like to specify the mask
being used. We can do so by passing an array of those property initial
values as follows, where the array keys are property names and array values
the initial values of the corresponding widget properties:

~~~
[php]
<?php
$this->widget('CMaskedTextField',array(
	'mask'=>'99/99/9999'
));
?>
~~~

To define a new widget, extend [CWidget] and override its
[init()|CWidget::init] and [run()|CWidget::run] methods:

~~~
[php]
class MyWidget extends CWidget
{
	public function init()
	{
		// this method is called by CController::beginWidget()
	}

	public function run()
	{
		// this method is called by CController::endWidget()
	}
}
~~~

Like a controller, a widget can also have its own view. By default, widget
view files are located under the `views` subdirectory of the directory
containing the widget class file. These views can be rendered by calling
[CWidget::render()], similar to that in controller. The only difference is
that no layout will be applied to a widget view.

System View
-----------

System views refer to the views used by Yii to display error and logging
information. For example, when a user requests for a non-existing controller
or action, Yii will throw an exception explaining the error. Yii displays the
exception using a specific system view.

The naming of system views follows some rules. Names like `errorXXX` refer
to views for displaying [CHttpException] with error code `XXX`. For
example, if [CHttpException] is raised with error code 404, the `error404`
view will be displayed.

Yii provides a set of default system views located under
`framework/views`. They can be customized by creating the same-named view
files under `protected/views/system`.

<div class="revision">$Id: basics.view.txt 416 2009-03-04 20:33:11Z thaiki $</div>