开发规范
===========

Yii 偏爱规范胜于配置。遵循规范可使你能够创建成熟的Yii应用而不需要编写、维护复杂的配置。
当然了，在必要时，Yii 仍然可以在几乎所有的方面通过配置实现自定义。

下面我们讲解 Yii 编程中推荐的开发规范。
为简单起见，我们假设 `WebRoot` 是 Yii 应用安装的目录。

URL
---

默认情况下，Yii 识别如下格式的 URL：

~~~
http://hostname/index.php?r=ControllerID/ActionID
~~~

`r` GET 变量意为
[路由（route）](/doc/guide/basics.controller#route) ，它可以被Yii解析为 控制器和动作。
如果 `ActionID` 被省略，控制器将使用默认的动作（在[CController::defaultAction]中定义）；
如果 `ControllerID` 也被省略（或者 `r` 变量不存在），应用将使用默认的控制器
（在[CWebApplication::defaultController]中定义）。

通过 [CUrlManager] 的帮助，可以创建更加可识别，更加 SEO 友好的 URL，例如
`http://hostname/ControllerID/ActionID.html`。此功能在 [URL Management](/doc/guide/topics.url) 中有详细讲解。


代码
----

Yii 推荐命名变量、函数和类时使用 驼峰风格，即每个单词的首字母大写并连在一起，中间无空格。
变量名和函数名应该使它们的第一个单词全部小写，以使其区别于类名（例如：`$basePath`,
`runController()`, `LinkPager`）。对私有类成员变量来说，我们推荐以下划线作为其名字前缀（例如： `$_actionList`）。

由于在 PHP 5.3.0 之前不支持名字空间，我们推荐类要通过某种独立的方式命名，以避免和第三方类发生冲突。鉴于此，
所有的 Yii 框架类名以 "C" 作前缀。

一个针对控制器名字的特殊规则是它们必须以单词 `Controller` 结尾。那么控制器 ID 即类名的首字母小写并去掉单词 `Controller`。
例如，`PageController` 类的 ID 就是  `page` 。这个规则使应用更加安全。它还使控制器相关的URL更加简单(例如 `/index.php?r=page/index` 而不是 
`/index.php?r=PageController/index`)。

配置
-------------

配置是一个键值对数组。每个键代表了所配置的对象中的属性名，每个值则为相应属性的初始值。
例如， `array('name'=>'My
application', 'basePath'=>'./protected')` 初始化了 `name` 和
`basePath` 属性为它们相应的数组值。

类中任何可写的属性都可以被配置。如果没有配置，属性将使用它们的默认值。
当配置一个属性时，最好阅读相应文档以保证初始值正确。

文件
----

Conventions for naming and using files depend on their types.

Class files should be named after the public class they contain. For
example, the [CController] class is in the `CController.php` file.  A
public class is a class that may be used by any other classes. Each class
file should contain at most one public class. Private classes (classes that
are only used by a single public class) may reside in the same file with
the public class.

View files should be named after the view name. For example, the `index`
view is in the `index.php` file. A view file is a PHP script file that
contains HTML and PHP code mainly for presentational purpose.

Configuration files can be named arbitrarily. A configuration file is a
PHP script whose sole purpose is to return an associative array
representing the configuration.

Directory
---------

Yii assumes a default set of directories used for various purposes. Each
of them can be customized if needed.

   - `WebRoot/protected`: this is the [application base
directory](/doc/guide/basics.application#application-base-directory) holding all
security-sensitive PHP scripts and data files. Yii has a default alias
named `application` associated with this path. This directory and
everything under should be protected from being accessed by Web users. It
can be customized via [CWebApplication::basePath].

   - `WebRoot/protected/runtime`: this directory holds private temporary
files generated during runtime of the application. This directory must be
writable by Web server process. It can be customized via
[CApplication::runtimePath].

   - `WebRoot/protected/extensions`: this directory holds all third-party
extensions. It can be customized via [CApplication::extensionPath].

   - `WebRoot/protected/modules`: this directory holds all application
[modules](/doc/guide/basics.module), each represented as a subdirectory.

   - `WebRoot/protected/controllers`: this directory holds all controller
class files. It can be customized via [CWebApplication::controllerPath].

   - `WebRoot/protected/views`: this directory holds all view files,
including controller views, layout views and system views. It can be
customized via [CWebApplication::viewPath].

   - `WebRoot/protected/views/ControllerID`: this directory holds view
files for a single controller class. Here `ControllerID` stands for the ID
of the controller. It can be customized via [CController::viewPath].

   - `WebRoot/protected/views/layouts`: this directory holds all layout
view files. It can be customized via [CWebApplication::layoutPath].

   - `WebRoot/protected/views/system`: this directory holds all system
view files. System views are templates used in displaying exceptions and
errors. It can be customized via [CWebApplication::systemViewPath].

   - `WebRoot/assets`: this directory holds published asset files. An
asset file is a private file that may be published to become accessible to
Web users. This directory must be writable by Web server process. It can be
customized via [CAssetManager::basePath].

   - `WebRoot/themes`: this directory holds various themes that can be
applied to the application. Each subdirectory represents a single theme
whose name is the subdirectory name. It can be customized via
[CThemeManager::basePath].

Database
--------

Most Web applications are backed by some database. For best practice, we propose
the following naming conventions for database tables and columns. Note that they
are not required by Yii.

   - Both database tables and columns are named in lower case.

   - Words in a name should be separated using underscores (e.g. `product_order`).

   - For table names, you may use either singular or plural names, but not both.
For simplicity, we recommend using singular names.

   - Table names may be prefixed with a common token such as `tbl_`. This is
especially useful when the tables of an application coexist in the same database
with the tables of another application. The two sets of tables can be readily
separate by using different table name prefixes.



<div class="revision">$Id: basics.convention.txt 2345 2010-08-28 12:51:08Z mdomba $</div>