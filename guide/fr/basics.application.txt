Application
===========

L'application représente le contexte d'exécution de gestion des requêtes.
Son principal objet est de résoudre les requêtes utilisateurs et de les
rediriger vers le contrôleur adéquat. Elle sert aussi à centraliser toutes
les informations de configuration qui lui relative.
C'est pour cela que l'application peut aussi être appelé `front-controller`

L'application est un singleton créé par le [script de démarrage](/doc/guide/basics.entry).
Le singleton peut être accédé de n'importe ou en utilisant [Yii::app()|YiiBase::app].

Configuration de l'Application
------------------------------

Par défaut, l'application est une instance de [CWebApplication]. Pour 
la paramétrer, dans la plupart des cas, il suffit de fournir un fichier de
configuration (ou un array) qui permet d'initialiser les valeurs des 
propriétés de l'instance à sa création. Lorsque le paramétrage par
fichier de configuration est inadapté ou insuffisant, il est possible
d'étendre directement [CWebApplication].

La configuration est un tableau de paires clef-valeur ou chaque clef représente
le nom d'une propriété de l'instance de l'application et chaque valeur, la valeur
à affecter lors de l'initialisation.
Par exemple, la configuration suivante permet de paramétrer les 
propriété [name|CApplication::name] et [defaultController|CWebApplication::defaultController]
d'une application.

~~~
[php]
array(
	'name'=>'Yii Framework',
	'defaultController'=>'site',
)
~~~

De façon générale, la configuration est stockée dans un script PHP
séparé (e.g. `protected/config/main.php`) qui retourne le tableau 
de paramétrage.

~~~
[php]
return array(...);
~~~

Pour utiliser cette méthode de configuration, il suffit de passer le nom du
fichier au constructeur de l'application ou a la méthode [Yii::createWebApplication()]
comme dans l'exemple suivant,, ce qui est fait la plupart du temps dans le 
[script de démarrage](/doc/guide/basics.entry):

~~~
[php]
$app=Yii::createWebApplication($configFile);
~~~

> truc: si la configuration est très complexe, il est possible de la segmenter
en plusieurs fichiers, chacun retournant un fraction du tableau de configuration.
Ensuite, il ne reste qu'à assembler au sein du fichier de configuration général les
différents segments (en utilisant la directive PHP `include()`). 

Dossier de base de l'Application
--------------------------------

Le dossier de base de l'application est le dossier racine qui contient tous les
élément sensibles de l'application (scripts PHP, données, ...). En standard,
c'est le sous dossier `protected` qui se trouve à l'intérieur du dossier
qui contient le script de démarrage. Ce dossier peut être changé en modifiant 
la propriété [basePath|CWebApplication::basePath] dans le fichier de [configuration de l'application](#application-configuration).

Les utilisateurs Web ne doivent pas pouvoir accéder aux contenus de ce dossier.
Cela peut être réalisé très simplement sur [serveur Web Apache](http://httpd.apache.org/),
en déposant dans le dossier à protéger un fichier `.htaccess` contenant

~~~
deny from all
~~~

Composant d'Application
-----------------------

Functionalities of application can be easily customized and enriched with
its flexible component architecture. Application manages a set of
application components, each implementing specific features.
For example, application resolves a user request with the help of [CUrlManager]
and [CHttpRequest] components.

By configuring the [components|CApplication::components] property of
application, we can customize the class and property values of any
application component used in an application. For example, we can
configure [CMemCache] component so that it can use multiple memcache
servers for caching,

~~~
[php]
array(
	......
	'components'=>array(
		......
		'cache'=>array(
			'class'=>'CMemCache',
			'servers'=>array(
				array('host'=>'server1', 'port'=>11211, 'weight'=>60),
				array('host'=>'server2', 'port'=>11211, 'weight'=>40),
			),
		),
	),
)
~~~

In the above, we add the `cache` element to the `components` array. The
`cache` element states that the class of the component is
`CMemCache` and its `servers` property should be initialized as such.

To access an application component, use `Yii::app()->ComponentID`, where
`ComponentID` refers to the ID of the component (e.g. `Yii::app()->cache`).

An application component may be disabled by setting `enabled` to be false
in its configuration. Null is returned when we access a disabled component.

> Tip: By default, application components are created on demand. This means
an application component may not be created at all if it is not accessed
during a user request. As a result, the overall performance may not be
degraded even if an application is configured with many components. Some
application components (e.g. [CLogRouter]) may need to be created no matter
they are accessed or not. To do so, list their IDs in the [preload|CApplication::preload]
property of the application.

Core Application Components
---------------------------

Yii predefines a set of core application components to provide features
common among Web applications. For example, the
[request|CWebApplication::request] component is used to resolve user
requests and provide information such as URL, cookies. By configuring the
properties of these core components, we can change the default behaviors of
Yii in nearly every aspect.

Below we list the core components that are pre-declared by
[CWebApplication].

   - [assetManager|CWebApplication::assetManager]: [CAssetManager] -
manages the publishing of private asset files.

   - [authManager|CWebApplication::authManager]: [CAuthManager] - manages role-based access control (RBAC).

   - [cache|CApplication::cache]: [CCache] - provides data caching
functionality. Note, you must specify the actual class (e.g.
[CMemCache], [CDbCache]). Otherwise, null will be returned when you
access this component.

   - [clientScript|CWebApplication::clientScript]: [CClientScript] -
manages client scripts (javascripts and CSS).

   - [coreMessages|CApplication::coreMessages]: [CPhpMessageSource] -
provides translated core messages used by Yii framework.

   - [db|CApplication::db]: [CDbConnection] - provides the database
connection. Note, you must configure its
[connectionString|CDbConnection::connectionString] property in order
to use this component.

   - [errorHandler|CApplication::errorHandler]: [CErrorHandler] - handles
uncaught PHP errors and exceptions.

   - [messages|CApplication::messages]: [CPhpMessageSource] - provides
translated messaged used by Yii application.

   - [request|CWebApplication::request]: [CHttpRequest] - provides
information related with user requests.

   - [securityManager|CApplication::securityManager]: [CSecurityManager] -
provides security-related services, such as hashing, encryption.

   - [session|CWebApplication::session]: [CHttpSession] - provides
session-related functionalities.

   - [statePersister|CApplication::statePersister]: [CStatePersister] -
provides global state persistence method.

   - [urlManager|CWebApplication::urlManager]: [CUrlManager] - provides
URL parsing and creation functionality.

   - [user|CWebApplication::user]: [CWebUser] - represents the identity
information of the current user.

   - [themeManager|CWebApplication::themeManager]: [CThemeManager] - manages themes.


Cycle de vie d'une Application
------------------------------

Lors de la prise en charge d'une requête, l'application passe
par les étapes suivantes :

   1. Mise en place de l'autoloader et de la gestion des erreurs;
   2. Chargement des composants du noyau;
   3. Chargement de la configuration de l'application;
   4. Initialisation de l'application avec [CApplication::init()]
	   - Chargement des composants statiques;
   5. Levée de l'évènement [onBeginRequest|CApplication::onBeginRequest];
   6. Traitement de la requête utilisateur:
	   - Résolution de la requête;
	   - Création du contrôleur;
	   - Exécution du contrôleur;
   7. Levée de l'évènement [onEndRequest|CApplication::onEndRequest];

<div class="revision">$Id$</div>