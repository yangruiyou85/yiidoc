Erstellen der ersten Yii-Anwendung
==================================

Um einen ersten Eindruck von Yii zu bekommen, beschreiben wir in diesem
Abschnitt, wie wir unsere erste Yii-Anwendung erstellen. Wir werden dazu den
mächtige `yiic`-Befehl verwenden, ein Hilfsprogramm zur automatischen
Codegenerierung für verschiedenste Zwecke. Wir gehen davon aus, dass `YiiRoot`
das Verzeichnis ist, in dem Yii installiert wurde.

Starten Sie `yiic` von der Kommandozeile wie folgt:

~~~
% YiiRoot/framework/yiic webapp WebRoot/testdrive
~~~

> Note|Hinweis: Wenn Sie `yiic` unter Mac OS, Linux or Unix starten, müssen Sie evtl.
die Zugriffsrechte der `yiic`-Datei auf *ausführbar* setzen. Statt `yiic`
können Sie auch `php YiiRoot/framework/yiic.php` verwenden.

Damit wird die Grundstruktur einer Yii-Anwendung im Verzeichnis
`WebRoot/testdrive` angelegt, wobei `WebRoot` für das Wurzelverzeichnis
(`DocumentRoot`) Ihres Webservers steht. Die Anwendung ist ein guter
Ausgangspunkt um weitere Features zu ergänzen, da sie alle benötigten
Verzeichnisse und Dateien enthält.

Ohne eine einzige Zeile Code zu schreiben, können wir unsere erste
Yii-Anwendung einem Testlauf unterziehen, indem wir folgende URL in einem
Webbrowser aufrufen:

~~~
http://hostname/testdrive/index.php
~~~

Wie wir sehen, besteht die Anwendung aus drei Seiten: Der Startseite, der
Kontaktseite und der Anmeldeseite. Die Startseite zeigt einige
Anwendungsinformationen sowie den Anmeldestatus des Benutzers. Die
Kontaktseite enthält ein Kontaktformular, das Besucher für Anfragen ausfüllen 
und abschicken können. Und die Kontaktseite erlaubt die Authentifizierung von
Benutzern, bevor Ihnen Zugriff auf geschützte Inhalte gewährt wird. Die
folgenden Screenshots zeigen mehr Details:


![Home page](first-app1.png)

![Contact page](first-app2.png)

![Contact page with input errors](first-app3.png)

![Contact page with success](first-app4.png)

![Login page](first-app5.png)


Das folgende Diagramm zeigt die Verzeichnisstruktur unserer Anwendung. Bitte
lesen Sie die [Konventionen](/doc/guide/basics.convention#directory) für 
eine nähere Erläuterung dieser Struktur.

~~~
testdrive/
   index.php                 Eingangsscript der Web-Anwendung
   assets/                   enthält veröffentlichte Quelldateien
   css/                      enthält CSS-Dateien
   images/                   enthält Bilddateien
   themes/                   enthält Anwendungs-Themes (Motive)
   protected/                enthält geschützte Anwendungsdateien
      yiic                   yiic-Script für die Kommandozeile
      yiic.bat               yiic-Script für die Kommandozeile unter Windows
      commands/              enthält selbst erstellte 'yiic'-Kommandos
         shell/              enthält selbst erstellte 'yiic shell'-Kommandos
      components/            enthält wiederverwendbare Benutzerkomponenten
         MainMenu.php        die 'MainMenu' (Hauptmenü) Widget-Klasse
         Identity.php        die Klasse 'Identity' (Identität) für die Authentifizierung
         views/              enthält View-Dateien für Widgets
            mainMenu.php     die View-Datei für das 'MainMenu'-Widget
      config/                enthält Konfigurationsdateien
         console.php         die Konfiguration für Konsolenanwendungen
         main.php            die Konfiguration für Webanwendungen
      controllers/           enthält Klassendateien für Controller
         SiteController.php  die Klasse des Standard-Controllers
      extensions/            enthält Erweiterungen von Drittanbietern
      messages/              enthält übersetzte Meldungen
      models/                enthält Klassendateien für Models
         LoginForm.php       das Form-Model für die 'login'-Action
         ContactForm.php     das Form-Model für die 'contact'-Action
      runtime/               enthält temporär erzeugte Dateien
      views/                 enthält Controller-Views und Layout-Dateien
         layouts/            enthält Layout-View-Dateien
            main.php         das Standard-Layout für alle Views
         site/               enthält View-Dateien für den Site-Controller
            contact.php      der View für die 'contact'-Action
            index.php        der View für ide 'index'-Action
            login.php        der View für die 'login'-Action
         system/             enthält System-View-Dateien
~~~

Verbindung zu einer Datenbank
-----------------------------

Die meisten Webapplikationen sind datenbankgestützt. Unsere Testanwendung bildet 
hier keine Ausnahme. Um eine Datenbank zu verwenden, müssen wir der Anwendung 
zunächst mitteilen, wie die Verbindung zur Datenbank aufgebaut wird. Das geschieht, 
indem wir die Konfigurationsdatei der Anwendung in 
`WebRoot/testdrive/protected/config/main.php` wie folgt abändern:

~~~
[php]
return array(
	......
	'components'=>array(
		......
		'db'=>array(
			'connectionString'=>'sqlite:protected/data/source.db',
		),
	),
	......
);
~~~

Hier fügen wir einen `db`-Eintrag zu `components` (Komponenten) hinzu, wodurch
die Applikation angewiesen wird, sich bei Bedarf mit der SQLite-Datenbank 
`WebRoot/testdrive/protected/data/source.db` zu verbinden.

> Note|Hinweis: Um Yiis Datenbankfunktionen zu nutzen, müssen wir in PHP die 
PDO-Erweiterung inkl. der treiberspezifischen PDO-Erweiterung einschalten.
Für die Testanwendung müssen also `php_pdo` und `php_pdo_sqlite` aktiviert
sein.

Dazu müssen wir ein SQLite-Datenbank vorbereiten, damit die obige
Konfiguration auch funktioniert. Mit dem SQLite-Admin-Tool können wir eine
Datenbank mit dem folgenden Schema erstellen:

~~~
[sql]
CREATE TABLE User (
	id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
	username VARCHAR(128) NOT NULL,
	password VARCHAR(128) NOT NULL,
	email VARCHAR(128) NOT NULL
);
~~~

Der Einfachheit halber erzeugen wir nur eine einzelne Tabelle `User` in
unserer Datenbank. Die SQLite-Datenbankdatei wird als
`WebRoot/testdrive/protected/data/source.db` gespeichert. Beachten Sie, dass
SQLite erfordert, dass der Webserver sowohl in die Datenbankdatei als auch 
in das übergeordnete Verzeichnis schreiben kann.

Implementierung von CRUD-Operationen
------------------------------------

Jetzt kommen wir zum vergnüglichen Teil. Wir möchten die CRUD-Operationen (engl.:
"*C*reate, *R*ead, *U*pdate, *D*elete", "Erstellen, Lesen, Aktualisieren und Löschen")
für die eben erstellte Tabelle `User` implementieren. Dies wird üblicherweise
auch in praktischen Anwendungen benötigt.

Wieder verwenden wir den `yiic`-Befehl, der uns beim Generieren des benötigten
Codes behilflich sein wird. Dieser Prozess wird auch als *scaffolding*
(engl., sinngemäß: "Ein Gerüst erstellen") bezeichnet.

~~~
% cd WebRoot/testdrive
% YiiRoot/framework/yiic shell
Yii Interactive Tool v1.0
Please type 'help' for help. Type 'exit' to quit.
>> model User
   generate User.php

The 'User' class has been successfully created in the following file:
    D:\wwwroot\testdrive\protected\models\User.php

If you have a 'db' database connection, you can test it now with:
    $model=User::model()->find();
    print_r($model);

>> crud User
   generate UserController.php
   generate create.php
      mkdir D:/wwwroot/testdrive/protected/views/user
   generate update.php
   generate list.php
   generate show.php

Crud 'user' has been successfully created. You may access it via:
http://hostname/path/to/index.php?r=user
~~~

Hier verwenden wir das `shell`-Kommando von `yiic`, um mit unserer neu
erstellten Anwendung zu kommunizieren. An der Eingabeaufforderung können wir
einen gültigen PHP-Ausdruck bzw. eine PHP-Anweisung zur Ausführung und Ausgabe
eingeben. Wir können auch Aufgaben erledigen, wie `model` oder `crud` im
Beispiel oben. Das Kommando `model` erzeugt automatisch die Model-Klasse `User`,
basierend auf dem Schema unserer Tabelle `User`. Und das Kommando `crud`
generiert die Controller-Klassen und Views die zusammen die CRUD-Operationen
für unser `User`-Model bilden.

> Note|Hinweis: Wenn Sie irgendwelche Änderungen an Ihrem Code oder Ihrer
Konfiguration vornehmen, rufen Sie bitte `yiic shell` erneut auf, damit 
die Änderungen wirksam werden. Stellen Sie ausserdem sicher, dass Sie die 
richtige Kommandozeilen-Version (CLI) von PHP verwenden. Andernfalls begegnen 
Ihnen Fehler wie "...could not find driver" ("...konnte Treiber nicht finden"), 
obwohl Sie sich sicher sind, dass Sie PDO und den zugehörigen Datenbanktreiber 
bereits aktiviert haben. Die Ursache für diese Art von Fehler liegt häufig 
darin, dass der Kommandozeilen-Interpreter von PHP die falsche `php.ini`
verwendet.

Genießen wir unsere Arbeit indem wir die folgende URL aufrufen:

~~~
http://hostname/testdrive/index.php?r=user
~~~

Dies zeigt eine Liste der eingetragenen Benutzer in der Tabelle `User` an. 
Da unsere Tabelle leer ist, wird im Moment noch nichts angezeigt.

Klicken Sie auf der Seite auf den Link `Neuer Benutzer`. Wir werden auf die
Anmeldeseite geleitet, falls wir uns noch nicht angemeldet haben. Nach der
Anmeldung erscheint ein Eingabeformular, mit dem wir einen neuen
Benutzereintrag hinzufügen können. Füllen Sie das Formular aus und klicken Sie
unten auf den `Erstellen`-Button. Falls eine Eingabe fehlerhaft war, erscheint
ein hübscher Fehlerhinweis, der verhindert, dass wir die Eingabe speichern
können. Zurück in der Benutzerliste sollte der neu angelegte Benutzer jetzt
auftauchen.

Wiederholen Sie die obigen Schritte und fügen Sie weitere Benutzer hinzu.
Beachten Sie, dass auf der Seite der Benutzerliste automatisch eine Seitenblätterung 
(engl.: "pagination") erscheint, sobald zu viele Einträge für eine Seite vorhanden
sind.

Wenn wir uns mit `admin/admin` als Administrator anmelden, können wir die
Administrationsseite für Benutzer unter dieser URL aufrufen:

~~~
http://hostname/testdrive/index.php?r=user/admin
~~~

Dies zeigt uns eine schöne Liste mit Benutzern. Wir können auf die
Spaltentitel klicken um die entsprechenden Spalten zu sortieren. Und genauso
wie auf der Seite mit der Benutzerliste wird auch hier eine Seitenblätterung
angezeigt, sobald zu viele Benutzer für eine Seite vorhanden sind.

All diese netten Features erhalten wir, ohne eine einzige Zeile Code
geschrieben zu haben!

![User admin page](first-app6.png)

![Create new user page](first-app7.png)



<div class="revision">$Id$</div>
