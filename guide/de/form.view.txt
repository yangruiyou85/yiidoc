Erstellen des Formulars
=======================

Den `login`-View zu schreiben ist einfach. Wir beginnen mit dem `form` Tag,
dessen action-Attribut die URL der zuvor beschriebenen `login`-Action ist.
Wir ergänzen dann Label und Eingabefelder für die in der Klasse `LoginForm`
definierten Attribute. Zum Schluss fügen wir einen Button zum Absenden
hinzu. Das alles lässt sich mit reinem HTML-Code bewerkstelligen.

Yii bietet einige Helferklassen, die die Gestaltung von Views erleichtern. Um 
beispielsweise ein Textfeld oder eine Dropdown-Liste zu erstellen, können wir 
[CHtml::textField()] bzw. [CHtml::dropDownList()] aufrufen.

> Info: Man könnte sich fragen, welchen Nutzen diese Helfer bringen, wenn
> sie doch, verglichen mit einfachem HTML, fast die gleiche Menge an Code
> erfodern. Die Antwort ist, dass die Helfer mehr als nur HTML-Code
> bieten. Zum Beispiel erzeugt der folgende Code ein Texteingabefeld, das
> das Absenden des Formulars einleitet, wenn sein Wert vom Benutzer verändert
> wurde.
> ~~~
> [php]
> CHtml::textField($name,$value,array('submit'=>''));
> ~~~
> Dies würde andernfalls überall klobigen JavaScript-Code
> erforderlich machen.

Nachfolgend benutzen wir [CHtml], um das Anmeldeformular zu erstellen. Wir
nehmen an, dass die Variable `$model` eine Instanz von `LoginForm` ist.

~~~
[php]
<div class="form">
<?php echo CHtml::beginForm(); ?>

	<?php echo CHtml::errorSummary($model); ?>

	<div class="row">
		<?php echo CHtml::activeLabel($model,'username'); ?>
		<?php echo CHtml::activeTextField($model,'username') ?>
	</div>

	<div class="row">
		<?php echo CHtml::activeLabel($model,'password'); ?>
		<?php echo CHtml::activePasswordField($model,'password') ?>
	</div>

	<div class="row rememberMe">
		<?php echo CHtml::activeCheckBox($model,'rememberMe'); ?>
		<?php echo CHtml::activeLabel($model,'rememberMe'); ?>
	</div>

	<div class="row submit">
		<?php echo CHtml::submitButton('Login'); ?>
	</div>

<?php echo CHtml::endForm(); ?>
</div><!-- form -->
~~~

Der obige Code generiert ein dynamischeres Formular. [CHtml::activeLabel()] 
erzeugt zum Beispiel ein Label, das mit dem angegebenen Model-Attribut
verknüpft ist. Wenn beim Attribut ein Eingabefehler auftritt, ändert
sich die CSS-Klasse des Labels in `error`, was über entsprechende CSS-Stile
wiederum das Erscheinungsbild des Labels ändert. Gleichermaßen erzeugt
[CHtml::activeTextField()] ein Texteingabefeld für das angegebene Model-Attribut
und verändert ebenfalls seine CSS-Klasse im Falle eines Eingabefehlers. 

Wenn wir die mit den `yiic`-Skripten mitgelieferte Stylesheet-Datei `form.css`
nutzen, sieht das erzeugte Formular folgendermaßen aus:


![Die Anmeldeseite](login1.png)

![Die Anmeldeseite mit Fehlern](login2.png)

Seit Version 1.1.1 kann man Formulare auch mit dem neuen [CActiveForm]-Widget
erstellen. Damit ist es möglich, die Validierung sowohl auf Client- als auch 
auf Serverseite durchzuführen. Mit [CActiveForm] wird der obige Code dann zu:

~~~
[php]
<div class="form">
<?php $form=$this->beginWidget('CActiveForm'); ?>

	<?php echo $form->errorSummary($model); ?>

	<div class="row">
		<?php echo $form->label($model,'username'); ?>
		<?php echo $form->textField($model,'username') ?>
	</div>

	<div class="row">
		<?php echo $form->label($model,'password'); ?>
		<?php echo $form->passwordField($model,'password') ?>
	</div>

	<div class="row rememberMe">
		<?php echo $form->checkBox($model,'rememberMe'); ?>
		<?php echo $form->label($model,'rememberMe'); ?>
	</div>

	<div class="row submit">
		<?php echo CHtml::submitButton('Login'); ?>
	</div>

<?php $this->endWidget(); ?>
</div><!-- form -->
~~~

<div class="revision">$Id: form.view.txt 1751 2010-01-25 17:21:31Z qiang.xue $</div>
