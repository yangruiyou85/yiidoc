Создание первого Yii-приложения
===============================

Чтобы получить начальный опыт, в этой части мы опишем создание первого приложения под Yii.
Будем использовать мощную утилиту `yiic` для автоматической генерации кода. Предположим, что `YiiRoot` - 
это директория, где установлен Yii.

Запускаем `yiic` в консоли со следующими параметрами:

~~~
% YiiRoot/framework/yiic webapp WebRoot/testdrive
~~~

> Note: При использовании `yiic` на Mac OS, Linux или Unix вам понадобится установить соответствующее разрешение
для файла `yiic`, чтобы сделать его исполняемым. Вы также можете использовать `php YiiRoot/framework/yiic.php` вместо `yiic`.

В результате создастся каркас приложения в директории `WebRoot/testdrive`, 
где `WebRoot` - корневая директория вашего веб-сервера. 
Созданное приложение - хорошая отправная точка для добавления последующих функций, 
так как оно уже содержит все необходимые директории и файлы.

Ни написав ни единой строчки кода мы уже можем протестировать наше первое приложение под Yii, перейдя в браузере по следующему URL:

~~~
http://hostname/testdrive/index.php
~~~

Как можно видеть, приложение содержит три страницы: домашнюю, страницу контакта и логина.
Домашняя страница отображает немного информации о приложении и статусе пользователя, 
страница контакта предоставляет форму для отправки вопросов и пожеланий, а страница логина
позволяет пользователю пройти процедуру аутентификации для доступа к закрытому содержанию сайта.
Детали можно увидеть на следующих скриншотах.

![Home page](first-app1.png)

![Contact page](first-app2.png)

![Contact page with input errors](first-app3.png)

![Contact page with success](first-app4.png)

![Login page](first-app5.png)


Следующая диаграмма описывает структуру директорий нашего приложения.
Для более детального описания структуры - изучите [Соглашения](/doc/guide/basics.convention#directory).

~~~
testdrive/
   index.php                 Входной (entry) скрипт приложения
   assets/                   содержит файлы ресурсов
   css/                      содержит файлы CSS
   images/                   содержит картинки
   themes/                   содержит темы приложения
   protected/                содержит защищенные файлы приложения
      yiic                   скрипт yiic
      yiic.bat               скрипт yiic для Windows
      commands/              содержит кастомизированные команды 'yiic'
         shell/              содержит кастомизированные команды 'yiic shell'
      components/            содержит компоненты для повторного использования
         MainMenu.php        класс виджета 'MainMenu'
         Identity.php        класс 'Identity' для аутентификации
         views/              содержит файлы представления для виджетов
            mainMenu.php     файл представления для виджета 'MainMenu'
      config/                содержит конфигурационные файлы
         console.php         файл конфигурации консоли
         main.php            файл конфигурации веб-приложения
      controllers/           содержит файлы классов контроллеров
         SiteController.php  класс контроллера по умолчанию
      extensions/            содержит сторонние расширения
      messages/              содержит переведенные сообщения
      models/                содержит файлы классов моделей
         LoginForm.php       модель формы для экшна 'login'
         ContactForm.php     модель формы для экшна 'contact'
      runtime/               содержит временные файлы
      views/                 содержит файлы представления контроллеров и файлы разметки (layout)
         layouts/            содержит файлы представления разметки (layout)
            main.php         разметка по умолчанию для всех представлений
         site/               содержит файлы представления для контроллера 'site'
            contact.php      файл представления для экшна 'contact'
            index.php        файл представления для экшна 'index'
            login.php        файл представления для экшна 'login'
         system/             содержит системные файлы представления
~~~

Connecting to Database
----------------------

Большинство веб-приложений используют базы данных, и наше - не исключение. 
Для того, чтобы использовать базу данных, сперва необходимо объяснить приложению, как к ней подключиться.
Это делается путем изменения конфигурационных параметров в файле `WebRoot/testdrive/protected/config/main.php`, как показано ниже:

~~~
[php]
return array(
	......
	'components'=>array(
		......
		'db'=>array(
			'connectionString'=>'sqlite:protected/data/source.db',
		),
	),
	......
);
~~~

Здесь мы добавили элемент `db` в `components`, который указывает приложению, что необходимо подключиться 
к базе SQLite `WebRoot/testdrive/protected/data/source.db` по необходимости.

> Note: Для использования Yii с базами данных необходимы: расширение PHP PDO extension
и расширение PDO для вашей базы данных. Для тестового приложения нам понадобится включить 
расширения `php_pdo` и `php_pdo_sqlite`.

И наконец, мы должны подготовить базу SQLite. Используя любую утилиту для администрирования SQLite,
создадим базу данных следующей схемы:

~~~
[sql]
CREATE TABLE User (
	id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
	username VARCHAR(128) NOT NULL,
	password VARCHAR(128) NOT NULL,
	email VARCHAR(128) NOT NULL
);
~~~

Для простоты мы создадим только одну таблицу `User` в нашей базе данных.
Файл базы данных SQLite сохраняется в `WebRoot/testdrive/protected/data/source.db`. 
Учтите, что как файл базы данных, так и директория, в которой он содержится, должны
быть доступны для записи процессом веб-сервера, как того требует SQLite.

Создание операций CRUD
----------------------

А теперь веселая часть. Мы бы хотели добавить операции CRUD (создание, чтение,
обновление и удаление) для только что созданной таблицы `User`. Это часто необходимо
при создании практичных приложений.

И снова будем использовать утилиту `yiic` чтобы сгенерировать необходимый код. Этот процесс 
еще называют *скаффолдинг (scaffolding)*.

~~~
% cd WebRoot/testdrive
% YiiRoot/framework/yiic shell
Yii Interactive Tool v1.0
Please type 'help' for help. Type 'exit' to quit.
>> model User
   generate User.php

The 'User' class has been successfully created in the following file:
    D:\wwwroot\testdrive\protected\models\User.php

If you have a 'db' database connection, you can test it now with:
    $model=User::model()->find();
    print_r($model);

>> crud User
   generate UserController.php
   generate create.php
      mkdir D:/wwwroot/testdrive/protected/views/user
   generate update.php
   generate list.php
   generate show.php

Crud 'user' has been successfully created. You may access it via:
http://hostname/path/to/index.php?r=user
~~~

В примере выше мы использовали команду `shell` утилиты `yiic` для взаимодействия с 
созданным приложением. В командной строке можно ввести корректную команду PHP,
чтобы выполнить ее и вывести на экран. Также можно выполнять различные операции, такие как
`model` и `crud`, как показано выше. Команда `model` автоматически создает класс модели `User`,
основываясь на структуре таблицы `User`. Команда `crud` генерирует класс контроллера и файлы
представления, которые обеспечивают выполнение операций CRUD для модели `User`.

> Note: Если вы внесли изменения в ваш код или конфигурацию - перезапустите `yiic shell`, чтобы 
конфигурация была считана заново. Также убедитесь, что вы используете правильный PHP CLI для запуска
`yiic`. Иначе возможны ошибки вида "...could not find driver", даже если соответствующие расширения
PDO для базы данных подключены. Причина такого поведения в том, что неправильный PHP CLI использует
другой файл `php.ini`.

Давайте порадуемся нашим трудам, перейдя по следующему URL:

~~~
http://hostname/testdrive/index.php?r=user
~~~

Здесь должен отобразиться список пользователей из таблицы `User`. Так как наша таблица пустая, то на данный момент
мы ничего не увидим.

Кликните по ссылке `New User`. Если предварительно вы не прошли авторизацию - отобразится страница логина.
После авторизации мы увидим форму создания нового пользователя. Заполните форму и нажмите кнопку `Create`.
Если при заполнении формы были допущены неточности - мы увидим симпатичное сообщение об ошибке, которое предотвратит
нас от сохранения введенных данных. Возвращаясь к списку пользователей, мы должны увидеть в списке только что созданного
юзера.

Повторите это шаги, чтобы добавить еще немного пользователей. Заметьте, что при большом количестве юзеров список будет
автоматически разбиваться на страницы.

Если мы авторизируемся как `admin/admin`, то сможем увидеть страницу управления пользователями по такому URL:

~~~
http://hostname/testdrive/index.php?r=user/admin
~~~

Здесь будет отображена симпатичная таблица пользователей. Можем кликнуть на заголовке 
таблицы чтобы отсортировать записи по соответствующему столбцу. На админской странице также используется разбивка на страницы
при большом количестве юзеров в списке.

И все эти классные фишки возможны без написания и строчки кода!

![User admin page](first-app6.png)

![Create new user page](first-app7.png)



<div class="revision">$Id: quickstart.first-app.txt 446 2009-01-02 04:42:53Z qiang.xue $</div>