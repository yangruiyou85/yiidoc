Relacyjny Rekord Aktywny
========================

Dotychczas zobaczyliśmy jak używać Rekordu Aktywnego (AR) aby wybierać dane z jednej
tabeli bazodanowej. W tej sekcji opiszemy jak używać AR aby połączyć kilka powiązanych 
tabel baz danych i zwrócić połączony zbiór danych. 

W celu używania relacyjnego AR, wymagane jest, aby relacja dla obcego, klucza główny 
była dobrze zdeiniowana pomiędzy tabelami, które będą łączone. AR polega na metadanych 
tych relacji gdy decyduje jak połączyć tabele.

> Note|Przypis: Poczynając od wersji 1.0.1, możesz używać relacyjnego AR nawet jeśli
> nie zdefiniowałeś kluczów obcych w swojej bazie danych.

Dla uproszczenia, będziemy używali schematu bazy danych pokazanego na następnym 
diagramie zależności encji (ER) celem zilustrowania przykładów w tej sekcji.

![Diagram ER](er.png)

> Info|Info: Wsparcie dla ograniczeń kluczów obcych różmi sie w róznych DBMS.
>
> SQLite nie wspiera ograniczeń kluczów obcych, lecz wciąż możesz deklarować
> ograniczenia, podczas tworzenia tabel. AR może wykorzystać te deklaracje
> aby prawidłowo wspierać relacyjne zapytania.
>
> MySQL wspiera ograniczenia kluczów obcych gdy używany jest silnik InnoDB, 
> w przeciwieństwie do silnika MyISAM. Zalecamy zatem używannie InnoDB dla twoich
> baz danych MySQL.
> Podczas używania MyISAM, możesz wykorzystać następujący trik
> aby móc wykonywać relacyjne zapytania przy użyciu AR:
> ~~~
> [sql]
> CREATE TABLE Foo
> (
>   id INTEGER NOT NULL PRIMARY KEY
> );
> CREATE TABLE bar
> (
>   id INTEGER NOT NULL PRIMARY KEY,
>   fooID INTEGER
>      COMMENT 'CONSTRAINT FOREIGN KEY (fooID) REFERENCES Foo(id)'
> );
> ~~~
> Powyżej użyliśmy słowa kluczowego `COMMENT` aby opisać ograniczenia klucza obcego
> co może zostać przeczytanie przez AR aby rozponać opisywaną relację.

Deklarowanie relacji
----------------------

Zanim użyjemy AR aby wykonać relacyjne zapytanie, musimy pozwolić AR poznać jak 
jedna klasa AR jest powiązana z drugą.

Relacja pomiędzy dwoma klasami AR jest bezpośrednio związana z relacją pomiędzy 
tabelami bazy danych representowanych przez klasę AR. Z punkty widzenia bazy danych
relacja pomiędzy dwoma tabelami A i B może występować w 3 wariantach:
jeden-do-wielu (ang. one-to-many; np. `User` i `Post`), jeden-do-jednego (ang. one-to-one; 
np. `User` i `Profile`) oraz wiele-do-wielu (ang. many-to-many; np. `Category` i `Post`). 
W AR występują cztery rodzaje relacji:

   - `BELONGS_TO` (należy do): jeśli relacja pomiędzy tabelą A i B to jeden-do-jednego, 
   wtedy B należy do (np. post `Post` należy do użytkownika `User`);

   - `HAS_MANY` (posiada wiele): jeśli relacja pomiędzy tabelą A i B to jeden-do-wielu
   wtedy A ma wiele B (np. uzytkownik `User` ma wiele postów `Post`);

   - `HAS_ONE` (posiada jedną): to jest specjalny przypadek relacji `HAS_MANY` gdzie A posiada 
   co najwyżej jedno B (np. użytkownik `User` ma co najwyżej jeden profil `Profile`);

   - `MANY_MANY` (wiele do wielu): odpowiada relacji bazodanowej wiele-do-wielu. 
   Aby rozbić relację wiele-do-wielu na jeden-do-wielu potrzebna jest tablica asocjacyjna, 
   chyba, że DBMS nie wspiera bezpośrednio relacji wiele-do-wielu.
   W naszym przykładzie schemat bazy danych `PostCategory` zostanie użyty w tym celu. 
   W terminologii AR, możemy wytłumaczyć . In AR terminology, we can explain relację 
   wiele-do-wielu jako kombinację `BELONGS_TO` oraz `HAS_MANY`. Na przykład, 
post `Post` należy do wielu kategorii `Category` a kategoria `Category` posiada wiele postów `Post`.

Deklarowanie relacji w AR wymaga nadpisania metody [relations()|CActiveRecord::relations] 
z [CActiveRecord]. Metoda zwraca tablicę konfiguracji relacji. Każdy element tablicy 
reprezentuje pojedynczą relację opisaną w następującym formacie:

~~~
[php]
'NazwaZmiennej'=>array('TypRelacji', 'NazwaKlasy', 'KluczObcy', ...dodatkowe opcje)
~~~

gdzie `NazwaZmiennej` jest nazwą relacji; `TypRelacji` specyfikuje type relacji i posiada
jedną z czterech stałych wartości:
`self::BELONGS_TO`, `self::HAS_ONE`, `self::HAS_MANY` oraz
`self::MANY_MANY`; `NazwaKlasy` jest nazwą klasy AR powiązanej z tą klasą; oraz 
`KluczObcy` określa klucz(e) obcy(e) powiązane z tą relacją. Dodatkowe opcje moga być
określone na końcu każdej relacji (więcej szczegółów w dalszej części).

Następujący kod pokazuje jak możemy zadeklarować relacja dla klasy użytkownika `User`
oraz postu `Post`.

~~~
[php]
class Post extends CActiveRecord
{
	public function relations()
	{
		return array(
			'author'=>array(self::BELONGS_TO, 'User', 'authorID'),
			'categories'=>array(self::MANY_MANY, 'Category', 'PostCategory(postID, categoryID)'),
		);
	}
}

class User extends CActiveRecord
{
	public function relations()
	{
		return array(
			'posts'=>array(self::HAS_MANY, 'Post', 'authorID'),
			'profile'=>array(self::HAS_ONE, 'Profile', 'ownerID'),
		);
	}
}
~~~

> Info: A foreign key may be composite, consisting of two or more columns.
In this case, we should concatenate the names of the foreign key columns
and separate them with space or comma. For `MANY_MANY` relationship type,
the associative table name must also be specified in the foreign key. For
example, the `categories` relationship in `Post` is specified with the
foreign key `PostCategory(postID, categoryID)`.

The declaration of relationships in an AR class implicitly adds a property
to the class for each relationship. After a relational query is performed,
the corresponding property will be populated with the related AR
instance(s). For example, if `$author` represents a `User` AR instance,
we can use `$author->posts` to access its related `Post` instances.

Performing Relational Query
---------------------------

The simplest way of performing relational query is by reading a relational
property of an AR instance. If the property is not accessed previously, a
relational query will be initiated, which joins the two related tables and
filters with the primary key of the current AR instance. The query result
will be saved to the property as instance(s) of the related AR class. This
is known as the *lazy loading* approach, i.e., the relational query
is performed only when the related objects are initially accessed. The
example below shows how to use this approach:

~~~
[php]
// retrieve the post whose ID is 10
$post=Post::model()->findByPk(10);
// retrieve the post's author: a relational query will be performed here
$author=$post->author;
~~~

> Info: If there is no related instance for a relationship, the
corresponding property could be either null or an empty array. For
`BELONGS_TO` and `HAS_ONE` relationships, the result is null; for
`HAS_MANY` and `MANY_MANY`, it is an empty array.

The lazy loading approach is very convenient to use, but it is not
efficient in some scenarios. For example, if we want to access the author
information for `N` posts, using the lazy approach would involve executing
`N` join queries. We should resort to the so-called *eager loading*
approach under this circumstance.

The eager loading approach retrieves the related AR instances together
with the main AR instance(s). This is accomplished by using the
[with()|CActiveRecord::with] method together with one of the
[find|CActiveRecord::find] or [findAll|CActiveRecord::findAll] methods in
AR. For example,

~~~
[php]
$posts=Post::model()->with('author')->findAll();
~~~

The above code will return an array of `Post` instances. Unlike the lazy
approach, the `author` property in each `Post` instance is already
populated with the related `User` instance before we access the property.
Instead of executing a join query for each post, the eager loading approach
brings back all posts together with their authors in a single join query!

We can specify multiple relationship names in the
[with()|CActiveRecord::with] method and the eager loading approach will
bring them back all in one shot. For example, the following code will bring
back posts together with their authors and categories:

~~~
[php]
$posts=Post::model()->with('author','categories')->findAll();
~~~

We can also do nested eager loading. Instead of a list of relationship
names, we pass in a hierarchical representation of relationship names to
the [with()|CActiveRecord::with] method, like the following,

~~~
[php]
$posts=Post::model()->with(
	'author.profile',
	'author.posts',
	'categories')->findAll();
~~~

The above example will bring back all posts together with their author and
categories. It will also bring back each author's profile and posts.

> Note: The usage of the [with()|CActiveRecord::with] method has been changed
> since version 1.0.2. Please read the corresponding API documentation carefully.

The AR implementation in Yii is very efficient. When eager loading
a hierarchy of related objects involving `N` `HAS_MANY` or `MANY_MANY`
relationships, it will take `N+1` SQL queries to obtain the needed results.
This means it needs to execute 3 SQL queries in the last example because of
the `posts` and `categories` properties. Other frameworks take a more
radical approach by using only one SQL query. At first look, the radical approach
seems more efficient because fewer queries are being parsed and executed by
DBMS. It is in fact impractical in reality for two reasons. First, there
are many repetitive data columns in the result which takes extra time to
transmit and process. Second, the number of rows in the result set grows
exponentially with the number of tables involved, which makes it simply
unmanageable as more relationships are involved.

Since version 1.0.2, you can also enforce the relational query to be done with
only one SQL query. Simply append a [together()|CActiveFinder::together] call
after [with()|CActiveRecord::with]. For example,

~~~
[php]
$posts=Post::model()->with(
	'author.profile',
	'author.posts',
	'categories')->together()->findAll();
~~~

The above query will be done in one SQL query. Without calling [together|CActiveFinder::together],
this will need two SQL queries: one joins `Post`, `User` and `Profile` tables,
and the other joins `User` and `Post` tables.


Relational Query Options
------------------------

We mentioned that additional options can be specified in relationship
declaration. These options, specified as name-value pairs, are used to
customize the relational query. They are summarized as below.

   - `select`: a list of columns to be selected for the related AR class.
It defaults to '*', meaning all columns. Column names should be
disambiguated using `aliasToken` if they appear in an expression (e.g.
`COUNT(??.name) AS nameCount`).

   - `condition`: the `WHERE` clause. It defaults to empty. Note, column
references need to be disambiguated using `aliasToken` (e.g. `??.id=10`).

   - `params`: the parameters to be bound to the generated SQL statement.
This should be given as an array of name-value pairs. This option has been
available since version 1.0.3.

   - `on`: the `ON` clause. The condition specified here will be appended
to the joining condition using the `AND` operator. This option has been
available since version 1.0.2.

   - `order`: the `ORDER BY` clause. It defaults to empty. Note, column
references need to be disambiguated using `aliasToken` (e.g. `??.age
DESC`).

   - `with`: a list of child related objects that should be loaded
together with this object. Note, this is only honored by lazy loading, not
eager loading.

   - `joinType`: type of join for this relationship. It defaults to `LEFT
OUTER JOIN`.

   - `aliasToken`: the column prefix placeholder. It will be replaced
by the corresponding table alias to disambiguate column references.
It defaults to `'??.'`.

   - `alias`: the alias for the table associated with this relationship.
This option has been available since version 1.0.1. It defaults to null,
meaning the table alias is automatically generated. This is different
from `aliasToken` in that the latter is just a placeholder and will be
replaced by the actual table alias.

   - `together`: whether the table associated with this relationship should
be forced to join together with the primary table. This option is only meaningful for HAS_MANY and MANY_MANY relations. If this option is not set or false, each HAS_MANY or MANY_MANY relation will have their own JOIN statement to improve performance. This option has been available since version 1.0.3.

In addition, the following options are available for certain relationships
during lazy loading:

   - `group`: the `GROUP BY` clause. It defaults to empty. Note, column
references need to be disambiguated using `aliasToken` (e.g. `??.age`).
This option only applies to `HAS_MANY` and `MANY_MANY` relationships.

   - `having`: the `HAVING` clause. It defaults to empty. Note, column
references need to be disambiguated using `aliasToken` (e.g. `??.age`).
This option only applies to `HAS_MANY` and `MANY_MANY` relationships. Note:
option has been available since version 1.0.1.

   - `limit`: limit of the rows to be selected. This option does NOT apply
to `BELONGS_TO` relation.

   - `offset`: offset of the rows to be selected. This option does NOT
apply to `BELONGS_TO` relation.

Below we modify the `posts` relationship declaration in the `User` by
including some of the above options:

~~~
[php]
class User extends CActiveRecord
{
	public function relations()
	{
		return array(
			'posts'=>array(self::HAS_MANY, 'Post', 'authorID'
							'order'=>'??.createTime DESC',
							'with'=>'categories'),
			'profile'=>array(self::HAS_ONE, 'Profile', 'ownerID'),
		);
	}
}
~~~

Now if we access `$author->posts`, we would obtain the author's posts
sorted according to their creation time in descending order. Each post
instance also has its categories loaded.

> Info: When a column name appears in two or more tables being joined
together, it needs to be disambiguated. This is done by prefixing the
column name with its table name. For example, `id` becomes `Team.id`. In AR
relational queries, however, we do not have this freedom because the SQL
statements are automatically generated by AR which systematically gives
each table an alias. Therefore, in order to avoid column name conflict, we
use a placeholder to indicate the existence of a column which needs to be
disambiguated. AR will replace the placeholder with a suitable table alias
and properly disambiguate the column.

Dynamic Relational Query Options
--------------------------------

Starting from version 1.0.2, we can use dynamic relational query options
in both [with()|CActiveRecord::with] and the `with` option. The dynamic
options will overwrite existing options as specified in the [relations()|CActiveRecord::relations]
method. For example, with the above `User` model, if we want to use eager
loading approach to bring back posts belonging to an author in *ascending order*
(the `order` option in the relation specification is descending order), we
can do the following:

~~~
[php]
User::model()->with(array(
	'posts'=>array('order'=>'??.createTime DESC'),
	'profile',
))->findAll();
~~~

<div class="revision">$Id: database.arr.txt 683 2009-02-16 05:20:17Z qiang.xue $</div>