Migracja bazy danych
==================

> Note|Uwaga: Funkcjonalność migrowania bazy danych została udostępniona od wersji 1.1.6.

Tak jak w przypadku kodu, struktura bazy danych zmienia się wraz z dewelopmentem i zarządzaniem aplikacji bazodanowej. Na przykład, podczas dewelopmentu, możemy chcieć dodać nowa tabelę, czy też, po przeniesieniu aplikacji na serwer produkcyjny, może powstać potrzeba dodania indeksu do kolumny. Ważne jest, aby śledzić te zmiany w strukturze bazy danych (nazywane **migracją**) tak jak to robimy z kodem. Jeśli kod źródłowy i baza danych rozsynchronizują się, jest bardzo prawdopodobne, że cały system przestanie działać. Z tego powodu, Yii dostarcza narzędzie do migracji, które może śledzić historię migracji bazy danych, aplikować nowe migracje lub też odwracać istniejące.

Następujące kroki pokazują sposób używania migracji bazy danych w trakcie dewelopmentu:

1. Jan utworzył nową migrację (np. dodał nową tabelę)
2. Jan skomitował nową migrację do systemu kontroli wersji (np. SVN, GIT)
3. Stefan ściągnął zmiany z systemy kontroli wersji i otrzymał nową migrację
4. Stefan zaaplikował nową migrację na swoją lokalną bazę danych


Yii wspiera migrację bazy danych poprzez narzędzie linii poleceń `yiic migrate`. Narzędzie to wspiera tworzenie nowych migracji, aplikowanie/usuwanie/poprawianie migracji oraz wyświetlanie nowych migracji oraz ich historii.

W dalszej części opiszemy w jaki sposób używać to narzędzie.


Tworzenie migracji
-------------------

W celu utworzenia nowej migracji (np. utworzenie nowej tabeli), uruchamiamy następujące polecenie:

~~~
yiic migrate create --name=create_news_table
~~~

Parametr `name` powinien bardzo zwięźle opisywać migrację. Jeśli nie został podany, przyjmie wartość `untitled`. Jak zobaczymy w dalszej części, parametr `name` używany jest jako część klasy PHP, dlatego też powinien zawierać jedynie litery, cyfry lub znaki podkreślenia.

Powyższe polecenie utworzy w katalogu `protected/migrations` nowy plik nazwany `m20101129185401_create_news_table.php`, który zawierać będzie następujący, początkowy kod:

~~~
[php]
class m20101129185401_create_news_table extends CDbMigration
{
	public function up()
	{
	}

    /*
    public function down()
    {
    }
    */
}
~~~

Zauważ, że nazwa klasy jest taka sama jak nazwa pliku, zgodnie z wzorcem `m<timestamp>_<name>`, gdzie `<timestamp>` wskazuje na stempel czasu UTC (z ang. uniwersalny czas koordynowany) w którym to migracja została utworzona, a wartość reprezentująca `<name>` pobierana jest z parametru `name` polecenia.

Metoda `up()` powinna zawierać kod implementujący aklualną migrację bazy danych, podczas gdy metoda `down()` może zawierać kod usuwający to, co zostało zrobione w `up()`.

Czasami niemożliwe jest zaimplementowanie metody `down()`. Na przykład, jeśli usunęliśmy wiersze tabeli w metodzie `up()`, nie będziemy w stanie ich odtwozyć w metodzie `down()`. W takim przypadku migracja nazywana jest nieodwracalną, co oznacza, że nie możemy powrócić do poprzedniego stan bazy danych.

W ramach przykładu pokażmy migrację tworzącą tabelę wiadomości.

~~~
[php]
class m20101129185401_create_news_table extends CDbMigration
{
	public function up()
	{
		$this->createTable('tbl_news', array(
			'id' => 'pk',
			'title' => 'string NOT NULL',
			'content' => 'text',
		));
	}

	public function down()
	{
		$this->dropTable('tbl_news');
	}
}
~~~

Klasa bazowa [CDbMigration] dostarcza metod manipulujących danymi oraz schematem bazy danych. Na przykład, metoda [CDbMigration::createTable] utworzy tabelę w bazie danych, zaś metoda [CDbMigration::insert] wstawi wiersz danych. Wszystkie te metody używają połączenia z bazą danych zwracanego przez metodę [CDbMigration::getDbConnection()], która domyślnie zwraca `Yii::app()->db`.

> Info|Info: Jak można zauważyć, metody bazodanowe dostarczane przez [CDbMigration] są bardzo podobne dp tych z [CDbCommand]. Rzeczywiście są one takie same z tym wyjątkien, że metody [CDbMigration] odmierzają czas używany przez przez nie zużyty oraz wyświetlają pewne informację o parametrach metody.


Aplikowanie migracji
-------------------

W celu zastosowanie wszystkich nowodostępnych migracji (np. by zaktualizować lokalną wersję bazy danych) uruchom następujące polecenie:

~~~
yiic migrate
~~~

Polecenie wyświetli listę wszystkich nowych migracji. Jeśli potwierdzisz zaaplikowanie tych migracji, polecenie to wywoła metodę `up()` każdej z klasy migracyjnych, jedna po drugiej, w kolejności wartości znacznika czasu (ang. timestamp) zapisanego w nazie klasy.

Po zastosowaniu migracji, narzędzie migrujace zachowa rekord w tabeli o nazwie `tbl_migration`. Pozwoli to narzędziu zidentyfikować, które migracje zostały zaaplikowane a które nie. Jeśli tabela `tbl_migration` nie istnieje, narzędzie utworzy ją w bazie danych określonej przez komponent aplikacji `db`.

W celu zmigrowania bazy danych do określonej wersji, możemy użyć następującego polecenia:

~~~
yiic migrate --version=20101129185401
~~~

Oznacza to, że użyliśmy parametru wersji `version` w celu określenia stempla czasu (ang. timestamp), do którego chcemy zmigrować bazę danych. Jeśli istnieje wiele migracji pomiędzy ostatnio zaaplikowaną migracja a określoną w poleceniu, wszystkie one zostaną zaaplikowane. Jeśli określona migracja została już wcześniej zaaplikowana, wtedy to wszystkie migracje po niej zostaną odwrócone.

Czasami możemy chcież zaaplikować jedną bądź kilka nowych migracji. Możemy w tym celu użyć następującego polecenia:

~~~
yiic migrate up --step=3
~~~

Polecenie to zaaplikuje 3 kolejne nowe migracje. Zmiana parametru `step` pozwoli nam zmienić ilość migracji, które zostaną zaaplikowane. Jeśli parametr nie został określony, przyjmuje on domyślną wartość 1, oznaczającą zaaplikowanie jednej migracji naraz.


Odwracanie migracji
--------------------

W celu odwrócenia ostaniej lub kilku ostatnio zaaplikowanych migracji, możemy użyć następującego polecenia:

~~~
yiic migrate down --step=3
~~~

Polecenie to wywoła metodę `down()` dla 3 ostatnio zaaplikowanych migracji. Zmienianie parametru `step` pozwala nam zmieniać ilość migracji, które chcemy odwrócić. Jeśli parametr nie został określony przyjmuje on wartość domyślną 1, oznaczającą odwrócenie jednej migracji naraz.

Możliwe jest również przywrócenie migracji do konkretnej wersji, w pokazany wcześniej sposób:

~~~
yiic migrate --version=20101129185401
~~~

Tak jak wspominaliśmy wcześniej nie wszystkie migracje można odwrócic. Próbując odwrócić ten typ migracji otrzymamy wyjątek i przerwiemy cały proces.


Przywracanie migracji
------------------

Przywracanie migracji oznacza usunięcie a następnie zaaplikowanie określonej migracji. Może to być zrobione za pomocą następującego polecenia:

~~~
yiic migrate redo --step=3
~~~


Wyświetlanie informacji o migracji
-----------------------------

Poza aplikowaniem i odwracaniem migracji, narzędzie do migracji potrafi również wyświetlić historię migracji oraz nową migrację, gotowe do zaaplikowania.

~~~
yiic migrate history --limit=10
yiic migrate list
~~~

Pierwsze polecenie pokaże ostatnie 10 migracji, które zostały zaaplikowane wraz z czasem kiedy się to stało. Drugie polecenie wyświetli pełną listę nowych migracji, które nie zostały jeszcze zaaplikowane.


Dostosowywanie narzędzia migracji
--------------------------

Narzędzie migracyjne może zostać dostosowane w pary obszarach. By to uczynić, musimy zmodyfikować plik konfiguracji aplikacji konsolowej poprzez dodanie następującego kodu:

~~~
[php]
return array(
	......
	'commandMap'=>array(
		'migrate'=>array(
			'class'=>'system.cli.commands.MigrateCommand',
			'migrationPath'=>'path/to/migrations',
			'migrationTable'=>'migration_table_name',
			'connectionID'=>'db_app_id',
			'templateFile'=>'path/to/template',
		),
		......
	),
	......
);
~~~

Powyższy kod pozwala skonfigurować kilka właściwości narzędzia migracji:

* `migrationPath`: łańcuch znaków, określa katalog przechowywujący wszystkie klasy z migracjami. Jeśli nie został podany, będzie wskazywał podkatalog `migrations` w ścieżce głównej aplikacji.

* `migrationTable`: łańcuch, określa nazwę tabeli w bazie danych przechowującą historię migracji. Domyślna nazwa to `tbl_migration`. Struktura tabeli jest następująca `version varchar(255) primary key, apply_time integer`.

* `connectionID`: łańcuch, określa identyfikator ID komponentu bazodanowego aplikacji. Domyślnie 'db'.

* `templateFile`: łańcuch, określa ścieżkę do pliku, który posłuży jako szablon kodu do generowania klasy migracji. Jeśli pusty, wewnętrzy szablon zostanie użyty. W szablonie token `{ClassName}` zostanie zastąpiony przez aktualną nazwę klasy.


<div class="revision">$Id: database.migration.txt 2696 2010-11-30 20:23:09Z alexander.makarow $</div>